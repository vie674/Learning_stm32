
SPI_IMU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080051a4  080051a4  000061a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005220  08005220  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005228  08005228  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005228  08005228  00006228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005230  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  0800528c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800528c  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a54  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226b  00000000  00000000  00017ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00019d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  0001ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189fa  00000000  00000000  0001bc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a7c  00000000  00000000  000345fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4cf  00000000  00000000  00048078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  000d758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000dc4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800518c 	.word	0x0800518c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800518c 	.word	0x0800518c

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b99b 	b.w	80004a4 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9d08      	ldr	r5, [sp, #32]
 80001f2:	460c      	mov	r4, r1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d14e      	bne.n	8000296 <__udivmoddi4+0xaa>
 80001f8:	4694      	mov	ip, r2
 80001fa:	458c      	cmp	ip, r1
 80001fc:	4686      	mov	lr, r0
 80001fe:	fab2 f282 	clz	r2, r2
 8000202:	d962      	bls.n	80002ca <__udivmoddi4+0xde>
 8000204:	b14a      	cbz	r2, 800021a <__udivmoddi4+0x2e>
 8000206:	f1c2 0320 	rsb	r3, r2, #32
 800020a:	4091      	lsls	r1, r2
 800020c:	fa20 f303 	lsr.w	r3, r0, r3
 8000210:	fa0c fc02 	lsl.w	ip, ip, r2
 8000214:	4319      	orrs	r1, r3
 8000216:	fa00 fe02 	lsl.w	lr, r0, r2
 800021a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800021e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000222:	fb07 1114 	mls	r1, r7, r4, r1
 8000226:	fa1f f68c 	uxth.w	r6, ip
 800022a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb04 f106 	mul.w	r1, r4, r6
 8000236:	4299      	cmp	r1, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x64>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000242:	f080 8110 	bcs.w	8000466 <__udivmoddi4+0x27a>
 8000246:	4299      	cmp	r1, r3
 8000248:	f240 810d 	bls.w	8000466 <__udivmoddi4+0x27a>
 800024c:	3c02      	subs	r4, #2
 800024e:	4463      	add	r3, ip
 8000250:	1a59      	subs	r1, r3, r1
 8000252:	fbb1 f0f7 	udiv	r0, r1, r7
 8000256:	fb07 1110 	mls	r1, r7, r0, r1
 800025a:	fb00 f606 	mul.w	r6, r0, r6
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	429e      	cmp	r6, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x94>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000272:	f080 80fa 	bcs.w	800046a <__udivmoddi4+0x27e>
 8000276:	429e      	cmp	r6, r3
 8000278:	f240 80f7 	bls.w	800046a <__udivmoddi4+0x27e>
 800027c:	4463      	add	r3, ip
 800027e:	3802      	subs	r0, #2
 8000280:	2100      	movs	r1, #0
 8000282:	1b9b      	subs	r3, r3, r6
 8000284:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000288:	b11d      	cbz	r5, 8000292 <__udivmoddi4+0xa6>
 800028a:	40d3      	lsrs	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	e9c5 3200 	strd	r3, r2, [r5]
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	428b      	cmp	r3, r1
 8000298:	d905      	bls.n	80002a6 <__udivmoddi4+0xba>
 800029a:	b10d      	cbz	r5, 80002a0 <__udivmoddi4+0xb4>
 800029c:	e9c5 0100 	strd	r0, r1, [r5]
 80002a0:	2100      	movs	r1, #0
 80002a2:	4608      	mov	r0, r1
 80002a4:	e7f5      	b.n	8000292 <__udivmoddi4+0xa6>
 80002a6:	fab3 f183 	clz	r1, r3
 80002aa:	2900      	cmp	r1, #0
 80002ac:	d146      	bne.n	800033c <__udivmoddi4+0x150>
 80002ae:	42a3      	cmp	r3, r4
 80002b0:	d302      	bcc.n	80002b8 <__udivmoddi4+0xcc>
 80002b2:	4290      	cmp	r0, r2
 80002b4:	f0c0 80ee 	bcc.w	8000494 <__udivmoddi4+0x2a8>
 80002b8:	1a86      	subs	r6, r0, r2
 80002ba:	eb64 0303 	sbc.w	r3, r4, r3
 80002be:	2001      	movs	r0, #1
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d0e6      	beq.n	8000292 <__udivmoddi4+0xa6>
 80002c4:	e9c5 6300 	strd	r6, r3, [r5]
 80002c8:	e7e3      	b.n	8000292 <__udivmoddi4+0xa6>
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	f040 808f 	bne.w	80003ee <__udivmoddi4+0x202>
 80002d0:	eba1 040c 	sub.w	r4, r1, ip
 80002d4:	2101      	movs	r1, #1
 80002d6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fbb4 f6f8 	udiv	r6, r4, r8
 80002e2:	fb08 4416 	mls	r4, r8, r6, r4
 80002e6:	fb07 f006 	mul.w	r0, r7, r6
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d908      	bls.n	8000308 <__udivmoddi4+0x11c>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x11a>
 8000300:	4298      	cmp	r0, r3
 8000302:	f200 80cb 	bhi.w	800049c <__udivmoddi4+0x2b0>
 8000306:	4626      	mov	r6, r4
 8000308:	1a1c      	subs	r4, r3, r0
 800030a:	fbb4 f0f8 	udiv	r0, r4, r8
 800030e:	fb08 4410 	mls	r4, r8, r0, r4
 8000312:	fb00 f707 	mul.w	r7, r0, r7
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	429f      	cmp	r7, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x148>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 34ff 	add.w	r4, r0, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x146>
 800032c:	429f      	cmp	r7, r3
 800032e:	f200 80ae 	bhi.w	800048e <__udivmoddi4+0x2a2>
 8000332:	4620      	mov	r0, r4
 8000334:	1bdb      	subs	r3, r3, r7
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	e7a5      	b.n	8000288 <__udivmoddi4+0x9c>
 800033c:	f1c1 0720 	rsb	r7, r1, #32
 8000340:	408b      	lsls	r3, r1
 8000342:	fa22 fc07 	lsr.w	ip, r2, r7
 8000346:	ea4c 0c03 	orr.w	ip, ip, r3
 800034a:	fa24 f607 	lsr.w	r6, r4, r7
 800034e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000352:	fbb6 f8f9 	udiv	r8, r6, r9
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	fb09 6618 	mls	r6, r9, r8, r6
 800035e:	fa20 f307 	lsr.w	r3, r0, r7
 8000362:	408c      	lsls	r4, r1
 8000364:	fa00 fa01 	lsl.w	sl, r0, r1
 8000368:	fb08 f00e 	mul.w	r0, r8, lr
 800036c:	431c      	orrs	r4, r3
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000374:	4298      	cmp	r0, r3
 8000376:	fa02 f201 	lsl.w	r2, r2, r1
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x1a6>
 800037c:	eb1c 0303 	adds.w	r3, ip, r3
 8000380:	f108 36ff 	add.w	r6, r8, #4294967295
 8000384:	f080 8081 	bcs.w	800048a <__udivmoddi4+0x29e>
 8000388:	4298      	cmp	r0, r3
 800038a:	d97e      	bls.n	800048a <__udivmoddi4+0x29e>
 800038c:	f1a8 0802 	sub.w	r8, r8, #2
 8000390:	4463      	add	r3, ip
 8000392:	1a1e      	subs	r6, r3, r0
 8000394:	fbb6 f3f9 	udiv	r3, r6, r9
 8000398:	fb09 6613 	mls	r6, r9, r3, r6
 800039c:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x1d0>
 80003aa:	eb1c 0404 	adds.w	r4, ip, r4
 80003ae:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b2:	d266      	bcs.n	8000482 <__udivmoddi4+0x296>
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d964      	bls.n	8000482 <__udivmoddi4+0x296>
 80003b8:	3b02      	subs	r3, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c0:	fba0 8302 	umull	r8, r3, r0, r2
 80003c4:	eba4 040e 	sub.w	r4, r4, lr
 80003c8:	429c      	cmp	r4, r3
 80003ca:	46c6      	mov	lr, r8
 80003cc:	461e      	mov	r6, r3
 80003ce:	d350      	bcc.n	8000472 <__udivmoddi4+0x286>
 80003d0:	d04d      	beq.n	800046e <__udivmoddi4+0x282>
 80003d2:	b155      	cbz	r5, 80003ea <__udivmoddi4+0x1fe>
 80003d4:	ebba 030e 	subs.w	r3, sl, lr
 80003d8:	eb64 0406 	sbc.w	r4, r4, r6
 80003dc:	fa04 f707 	lsl.w	r7, r4, r7
 80003e0:	40cb      	lsrs	r3, r1
 80003e2:	431f      	orrs	r7, r3
 80003e4:	40cc      	lsrs	r4, r1
 80003e6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ea:	2100      	movs	r1, #0
 80003ec:	e751      	b.n	8000292 <__udivmoddi4+0xa6>
 80003ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f2:	f1c2 0320 	rsb	r3, r2, #32
 80003f6:	40d9      	lsrs	r1, r3
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000400:	fa00 fe02 	lsl.w	lr, r0, r2
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1110 	mls	r1, r8, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	431c      	orrs	r4, r3
 8000410:	fa1f f78c 	uxth.w	r7, ip
 8000414:	0c23      	lsrs	r3, r4, #16
 8000416:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041a:	fb00 f107 	mul.w	r1, r0, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x248>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f100 36ff 	add.w	r6, r0, #4294967295
 800042a:	d22c      	bcs.n	8000486 <__udivmoddi4+0x29a>
 800042c:	4299      	cmp	r1, r3
 800042e:	d92a      	bls.n	8000486 <__udivmoddi4+0x29a>
 8000430:	3802      	subs	r0, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	fbb3 f1f8 	udiv	r1, r3, r8
 800043a:	fb08 3311 	mls	r3, r8, r1, r3
 800043e:	b2a4      	uxth	r4, r4
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb01 f307 	mul.w	r3, r1, r7
 8000448:	42a3      	cmp	r3, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x272>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f101 36ff 	add.w	r6, r1, #4294967295
 8000454:	d213      	bcs.n	800047e <__udivmoddi4+0x292>
 8000456:	42a3      	cmp	r3, r4
 8000458:	d911      	bls.n	800047e <__udivmoddi4+0x292>
 800045a:	3902      	subs	r1, #2
 800045c:	4464      	add	r4, ip
 800045e:	1ae4      	subs	r4, r4, r3
 8000460:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000464:	e73b      	b.n	80002de <__udivmoddi4+0xf2>
 8000466:	4604      	mov	r4, r0
 8000468:	e6f2      	b.n	8000250 <__udivmoddi4+0x64>
 800046a:	4608      	mov	r0, r1
 800046c:	e708      	b.n	8000280 <__udivmoddi4+0x94>
 800046e:	45c2      	cmp	sl, r8
 8000470:	d2af      	bcs.n	80003d2 <__udivmoddi4+0x1e6>
 8000472:	ebb8 0e02 	subs.w	lr, r8, r2
 8000476:	eb63 060c 	sbc.w	r6, r3, ip
 800047a:	3801      	subs	r0, #1
 800047c:	e7a9      	b.n	80003d2 <__udivmoddi4+0x1e6>
 800047e:	4631      	mov	r1, r6
 8000480:	e7ed      	b.n	800045e <__udivmoddi4+0x272>
 8000482:	4603      	mov	r3, r0
 8000484:	e79a      	b.n	80003bc <__udivmoddi4+0x1d0>
 8000486:	4630      	mov	r0, r6
 8000488:	e7d4      	b.n	8000434 <__udivmoddi4+0x248>
 800048a:	46b0      	mov	r8, r6
 800048c:	e781      	b.n	8000392 <__udivmoddi4+0x1a6>
 800048e:	4463      	add	r3, ip
 8000490:	3802      	subs	r0, #2
 8000492:	e74f      	b.n	8000334 <__udivmoddi4+0x148>
 8000494:	4606      	mov	r6, r0
 8000496:	4623      	mov	r3, r4
 8000498:	4608      	mov	r0, r1
 800049a:	e711      	b.n	80002c0 <__udivmoddi4+0xd4>
 800049c:	3e02      	subs	r6, #2
 800049e:	4463      	add	r3, ip
 80004a0:	e732      	b.n	8000308 <__udivmoddi4+0x11c>
 80004a2:	bf00      	nop

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <IMU9250_WriteRegiter>:
 *      Author: hung
 */
#include "imu.h"

void IMU9250_WriteRegiter(uint8_t reg,uint8_t data,SPI_HandleTypeDef *hspi)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	603a      	str	r2, [r7, #0]
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	460b      	mov	r3, r1
 80004b6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = reg&(~0x80);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2110      	movs	r1, #16
 80004c6:	480c      	ldr	r0, [pc, #48]	@ (80004f8 <IMU9250_WriteRegiter+0x50>)
 80004c8:	f001 f990 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &temp, 1, 200);
 80004cc:	f107 010f 	add.w	r1, r7, #15
 80004d0:	23c8      	movs	r3, #200	@ 0xc8
 80004d2:	2201      	movs	r2, #1
 80004d4:	6838      	ldr	r0, [r7, #0]
 80004d6:	f002 febd 	bl	8003254 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi,&data,1,200);
 80004da:	1db9      	adds	r1, r7, #6
 80004dc:	23c8      	movs	r3, #200	@ 0xc8
 80004de:	2201      	movs	r2, #1
 80004e0:	6838      	ldr	r0, [r7, #0]
 80004e2:	f002 feb7 	bl	8003254 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2110      	movs	r1, #16
 80004ea:	4803      	ldr	r0, [pc, #12]	@ (80004f8 <IMU9250_WriteRegiter+0x50>)
 80004ec:	f001 f97e 	bl	80017ec <HAL_GPIO_WritePin>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40010800 	.word	0x40010800

080004fc <IMU9250_ReadRegiter>:
uint8_t IMU9250_ReadRegiter(uint8_t reg,SPI_HandleTypeDef *hspi)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = reg|0x80;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800050e:	b2db      	uxtb	r3, r3
 8000510:	73fb      	strb	r3, [r7, #15]
	uint8_t data=0;
 8000512:	2300      	movs	r3, #0
 8000514:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	480d      	ldr	r0, [pc, #52]	@ (8000550 <IMU9250_ReadRegiter+0x54>)
 800051c:	f001 f966 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &temp, 1, 200);
 8000520:	f107 010f 	add.w	r1, r7, #15
 8000524:	23c8      	movs	r3, #200	@ 0xc8
 8000526:	2201      	movs	r2, #1
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f002 fe93 	bl	8003254 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &data, 1, 200);
 800052e:	f107 010e 	add.w	r1, r7, #14
 8000532:	23c8      	movs	r3, #200	@ 0xc8
 8000534:	2201      	movs	r2, #1
 8000536:	6838      	ldr	r0, [r7, #0]
 8000538:	f002 ffd0 	bl	80034dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <IMU9250_ReadRegiter+0x54>)
 8000542:	f001 f953 	bl	80017ec <HAL_GPIO_WritePin>
	return data;
 8000546:	7bbb      	ldrb	r3, [r7, #14]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010800 	.word	0x40010800

08000554 <IMU9250_ReadGyroRaw>:
int16_t IMU9250_ReadGyroRaw(char name,SPI_HandleTypeDef *hspi)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
	int16_t data=0;
 8000560:	2300      	movs	r3, #0
 8000562:	81fb      	strh	r3, [r7, #14]
	uint8_t dataL=0,dataH=0;
 8000564:	2300      	movs	r3, #0
 8000566:	737b      	strb	r3, [r7, #13]
 8000568:	2300      	movs	r3, #0
 800056a:	733b      	strb	r3, [r7, #12]
	if (name =='X')
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b58      	cmp	r3, #88	@ 0x58
 8000570:	d113      	bne.n	800059a <IMU9250_ReadGyroRaw+0x46>
	{
		dataH=IMU9250_ReadRegiter(GYRO_XOUT_H, hspi);
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	2043      	movs	r0, #67	@ 0x43
 8000576:	f7ff ffc1 	bl	80004fc <IMU9250_ReadRegiter>
 800057a:	4603      	mov	r3, r0
 800057c:	733b      	strb	r3, [r7, #12]
		dataL=IMU9250_ReadRegiter(GYRO_XOUT_L, hspi);
 800057e:	6839      	ldr	r1, [r7, #0]
 8000580:	2044      	movs	r0, #68	@ 0x44
 8000582:	f7ff ffbb 	bl	80004fc <IMU9250_ReadRegiter>
 8000586:	4603      	mov	r3, r0
 8000588:	737b      	strb	r3, [r7, #13]
		data= (int16_t)(dataH<<8)|dataL;
 800058a:	7b3b      	ldrb	r3, [r7, #12]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	b21a      	sxth	r2, r3
 8000590:	7b7b      	ldrb	r3, [r7, #13]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	81fb      	strh	r3, [r7, #14]
 8000598:	e030      	b.n	80005fc <IMU9250_ReadGyroRaw+0xa8>
	}
	else if(name=='Y')
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b59      	cmp	r3, #89	@ 0x59
 800059e:	d113      	bne.n	80005c8 <IMU9250_ReadGyroRaw+0x74>
	{
		dataH=IMU9250_ReadRegiter(GYRO_YOUT_H, hspi);
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	2045      	movs	r0, #69	@ 0x45
 80005a4:	f7ff ffaa 	bl	80004fc <IMU9250_ReadRegiter>
 80005a8:	4603      	mov	r3, r0
 80005aa:	733b      	strb	r3, [r7, #12]
		dataL=IMU9250_ReadRegiter(GYRO_YOUT_L, hspi);
 80005ac:	6839      	ldr	r1, [r7, #0]
 80005ae:	2046      	movs	r0, #70	@ 0x46
 80005b0:	f7ff ffa4 	bl	80004fc <IMU9250_ReadRegiter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	737b      	strb	r3, [r7, #13]
		data= (int16_t)(dataH<<8)|dataL;
 80005b8:	7b3b      	ldrb	r3, [r7, #12]
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	b21a      	sxth	r2, r3
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	b21b      	sxth	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	81fb      	strh	r3, [r7, #14]
 80005c6:	e019      	b.n	80005fc <IMU9250_ReadGyroRaw+0xa8>
	}
	else if (name =='Z')
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b5a      	cmp	r3, #90	@ 0x5a
 80005cc:	d113      	bne.n	80005f6 <IMU9250_ReadGyroRaw+0xa2>
	{
		dataH=IMU9250_ReadRegiter(GYRO_ZOUT_H, hspi);
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	2047      	movs	r0, #71	@ 0x47
 80005d2:	f7ff ff93 	bl	80004fc <IMU9250_ReadRegiter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	733b      	strb	r3, [r7, #12]
		dataL=IMU9250_ReadRegiter(GYRO_ZOUT_L, hspi);
 80005da:	6839      	ldr	r1, [r7, #0]
 80005dc:	2048      	movs	r0, #72	@ 0x48
 80005de:	f7ff ff8d 	bl	80004fc <IMU9250_ReadRegiter>
 80005e2:	4603      	mov	r3, r0
 80005e4:	737b      	strb	r3, [r7, #13]
		data= (int16_t)(dataH<<8)|dataL;
 80005e6:	7b3b      	ldrb	r3, [r7, #12]
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	81fb      	strh	r3, [r7, #14]
 80005f4:	e002      	b.n	80005fc <IMU9250_ReadGyroRaw+0xa8>
	}
	else
	{
		return IM_NOT_OK ;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e001      	b.n	8000600 <IMU9250_ReadGyroRaw+0xac>
	}
	return data;
 80005fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <IMU9250_SetGyroOffset>:
		return IM_NOT_OK;
	}
	return data;
}
void IMU9250_SetGyroOffset (int16_t OffsetX,int16_t OffsetY,int16_t OffsetZ,SPI_HandleTypeDef *hspi)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4603      	mov	r3, r0
 8000612:	81fb      	strh	r3, [r7, #14]
 8000614:	460b      	mov	r3, r1
 8000616:	81bb      	strh	r3, [r7, #12]
 8000618:	4613      	mov	r3, r2
 800061a:	817b      	strh	r3, [r7, #10]
	uint8_t OffsetXL,OffsetXH,OffsetYL,OffsetYH,OffsetZL,OffsetZH;

	OffsetXL = OffsetX&(0xFF);
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	75fb      	strb	r3, [r7, #23]
	OffsetXH = (OffsetX>>8)&0xFF;
 8000620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000624:	121b      	asrs	r3, r3, #8
 8000626:	b21b      	sxth	r3, r3
 8000628:	75bb      	strb	r3, [r7, #22]

	OffsetYL = OffsetY&(0xFF);
 800062a:	89bb      	ldrh	r3, [r7, #12]
 800062c:	757b      	strb	r3, [r7, #21]
	OffsetYH = (OffsetY>>8)&0xFF;
 800062e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000632:	121b      	asrs	r3, r3, #8
 8000634:	b21b      	sxth	r3, r3
 8000636:	753b      	strb	r3, [r7, #20]

	OffsetZL = OffsetZ&(0xFF);
 8000638:	897b      	ldrh	r3, [r7, #10]
 800063a:	74fb      	strb	r3, [r7, #19]
	OffsetZH = (OffsetZ>>8)&0xFF;
 800063c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000640:	121b      	asrs	r3, r3, #8
 8000642:	b21b      	sxth	r3, r3
 8000644:	74bb      	strb	r3, [r7, #18]

	IMU9250_WriteRegiter(XG_OFFSET_H, OffsetXH, hspi);
 8000646:	7dbb      	ldrb	r3, [r7, #22]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	2013      	movs	r0, #19
 800064e:	f7ff ff2b 	bl	80004a8 <IMU9250_WriteRegiter>
	IMU9250_WriteRegiter(XG_OFFSET_L, OffsetXL, hspi);
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	2014      	movs	r0, #20
 800065a:	f7ff ff25 	bl	80004a8 <IMU9250_WriteRegiter>
	IMU9250_WriteRegiter(YG_OFFSET_H, OffsetYH, hspi);
 800065e:	7d3b      	ldrb	r3, [r7, #20]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	2015      	movs	r0, #21
 8000666:	f7ff ff1f 	bl	80004a8 <IMU9250_WriteRegiter>
	IMU9250_WriteRegiter(YG_OFFSET_L, OffsetYL, hspi);
 800066a:	7d7b      	ldrb	r3, [r7, #21]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	2016      	movs	r0, #22
 8000672:	f7ff ff19 	bl	80004a8 <IMU9250_WriteRegiter>
	IMU9250_WriteRegiter(ZG_OFFSET_H, OffsetZH, hspi);
 8000676:	7cbb      	ldrb	r3, [r7, #18]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	2017      	movs	r0, #23
 800067e:	f7ff ff13 	bl	80004a8 <IMU9250_WriteRegiter>
	IMU9250_WriteRegiter(ZG_OFFSET_L, OffsetZL, hspi);
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	2018      	movs	r0, #24
 800068a:	f7ff ff0d 	bl	80004a8 <IMU9250_WriteRegiter>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <IMU9250_CalculateGyroOffset>:
void IMU9250_SetDLPFAccer (uint8_t AccerLPFValue ,SPI_HandleTypeDef *hspi)
{
	IMU9250_WriteRegiter(ACCEL_CONFIG2,AccerLPFValue,hspi);
}
void IMU9250_CalculateGyroOffset(int16_t *offsetX, int16_t *offsetY, int16_t *offsetZ, SPI_HandleTypeDef *hspi)
{
 8000696:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800069a:	b09a      	sub	sp, #104	@ 0x68
 800069c:	af00      	add	r7, sp, #0
 800069e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80006a0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80006a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80006a4:	633b      	str	r3, [r7, #48]	@ 0x30
    int64_t sumX = 0, sumY = 0, sumZ = 0;
 80006a6:	f04f 0200 	mov.w	r2, #0
 80006aa:	f04f 0300 	mov.w	r3, #0
 80006ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    int16_t rawX, rawY, rawZ;
    int samples = 100;
 80006ca:	2364      	movs	r3, #100	@ 0x64
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48

    for (int i = 0; i < samples; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006d2:	e049      	b.n	8000768 <IMU9250_CalculateGyroOffset+0xd2>
        rawX = IMU9250_ReadGyroRaw('X', hspi);
 80006d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006d6:	2058      	movs	r0, #88	@ 0x58
 80006d8:	f7ff ff3c 	bl	8000554 <IMU9250_ReadGyroRaw>
 80006dc:	4603      	mov	r3, r0
 80006de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        rawY = IMU9250_ReadGyroRaw('Y', hspi);
 80006e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006e4:	2059      	movs	r0, #89	@ 0x59
 80006e6:	f7ff ff35 	bl	8000554 <IMU9250_ReadGyroRaw>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        rawZ = IMU9250_ReadGyroRaw('Z', hspi);
 80006f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006f2:	205a      	movs	r0, #90	@ 0x5a
 80006f4:	f7ff ff2e 	bl	8000554 <IMU9250_ReadGyroRaw>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        sumX += rawX;
 80006fe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000702:	17da      	asrs	r2, r3, #31
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000708:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800070c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800070e:	1851      	adds	r1, r2, r1
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000714:	414b      	adcs	r3, r1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800071c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        sumY += rawY;
 8000720:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000724:	17da      	asrs	r2, r3, #31
 8000726:	469a      	mov	sl, r3
 8000728:	4693      	mov	fp, r2
 800072a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800072e:	eb12 010a 	adds.w	r1, r2, sl
 8000732:	6039      	str	r1, [r7, #0]
 8000734:	eb43 030b 	adc.w	r3, r3, fp
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800073e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        sumZ += rawZ;
 8000742:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000746:	17da      	asrs	r2, r3, #31
 8000748:	461c      	mov	r4, r3
 800074a:	4615      	mov	r5, r2
 800074c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000750:	eb12 0804 	adds.w	r8, r2, r4
 8000754:	eb43 0905 	adc.w	r9, r3, r5
 8000758:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50

        HAL_Delay(10);
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fd8f 	bl	8001280 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8000762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000764:	3301      	adds	r3, #1
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800076a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800076c:	429a      	cmp	r2, r3
 800076e:	dbb1      	blt.n	80006d4 <IMU9250_CalculateGyroOffset+0x3e>
    }

    *offsetX = sumX / samples;
 8000770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000772:	17da      	asrs	r2, r3, #31
 8000774:	623b      	str	r3, [r7, #32]
 8000776:	627a      	str	r2, [r7, #36]	@ 0x24
 8000778:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800077c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000780:	f7ff fce4 	bl	800014c <__aeabi_ldivmod>
 8000784:	4602      	mov	r2, r0
 8000786:	460b      	mov	r3, r1
 8000788:	b212      	sxth	r2, r2
 800078a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800078c:	801a      	strh	r2, [r3, #0]
    *offsetY = sumY / samples;
 800078e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000790:	17da      	asrs	r2, r3, #31
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	61fa      	str	r2, [r7, #28]
 8000796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800079a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800079e:	f7ff fcd5 	bl	800014c <__aeabi_ldivmod>
 80007a2:	4602      	mov	r2, r0
 80007a4:	460b      	mov	r3, r1
 80007a6:	b212      	sxth	r2, r2
 80007a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007aa:	801a      	strh	r2, [r3, #0]
    *offsetZ = sumZ / samples;
 80007ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007ae:	17da      	asrs	r2, r3, #31
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	617a      	str	r2, [r7, #20]
 80007b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80007bc:	f7ff fcc6 	bl	800014c <__aeabi_ldivmod>
 80007c0:	4602      	mov	r2, r0
 80007c2:	460b      	mov	r3, r1
 80007c4:	b212      	sxth	r2, r2
 80007c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c8:	801a      	strh	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3768      	adds	r7, #104	@ 0x68
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080007d4 <AK8963_WriteRegister>:
    *angleX += angularVelocityX * deltaTime;
    *angleY += angularVelocityY * deltaTime;
    *angleZ += angularVelocityZ * deltaTime;
}
void AK8963_WriteRegister (uint8_t reg,uint8_t data,SPI_HandleTypeDef *hspi)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	603a      	str	r2, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	460b      	mov	r3, r1
 80007e2:	71bb      	strb	r3, [r7, #6]
	//Write I2C address of AK8963 to I2C_SLV_ADD
	IMU9250_WriteRegiter(I2C_SLV0_ADDR, AK8963_ADR, hspi);
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	2148      	movs	r1, #72	@ 0x48
 80007e8:	2025      	movs	r0, #37	@ 0x25
 80007ea:	f7ff fe5d 	bl	80004a8 <IMU9250_WriteRegiter>

	//Put the register address where begin to write
	IMU9250_WriteRegiter(I2C_SLV0_REG, reg, hspi);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	2026      	movs	r0, #38	@ 0x26
 80007f6:	f7ff fe57 	bl	80004a8 <IMU9250_WriteRegiter>

	//Put the data to write to AK8963 module
	IMU9250_WriteRegiter(I2C_SLV0_DO, data, hspi);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4619      	mov	r1, r3
 8000800:	2063      	movs	r0, #99	@ 0x63
 8000802:	f7ff fe51 	bl	80004a8 <IMU9250_WriteRegiter>

	//Enable reading data from A8963 and store in the first e EXT_SENS_DATA register
	//Choose number of byte to read
	IMU9250_WriteRegiter(I2C_SLV0_CTRL, I2C_ENABLE|0, hspi);
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	2027      	movs	r0, #39	@ 0x27
 800080c:	f7ff fe4c 	bl	80004a8 <IMU9250_WriteRegiter>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <IMU9250_InitI2CMaster>:
	data[i] = IMU9250_ReadRegiter(EXT_SENS_DATA_00+i, hspi);
	}
}

void IMU9250_InitI2CMaster(SPI_HandleTypeDef *hspi)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	//Turn on I2C Master
	IMU9250_WriteRegiter(USER_CTRL, 0x30, hspi);
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	2130      	movs	r1, #48	@ 0x30
 8000824:	206a      	movs	r0, #106	@ 0x6a
 8000826:	f7ff fe3f 	bl	80004a8 <IMU9250_WriteRegiter>

	//Choose clock for I2C in I2C control
	IMU9250_WriteRegiter(I2C_MST_CTRL, 0x0D, hspi);
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	210d      	movs	r1, #13
 800082e:	2024      	movs	r0, #36	@ 0x24
 8000830:	f7ff fe3a 	bl	80004a8 <IMU9250_WriteRegiter>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AK8963_Powerdown>:
void AK8963_TurnOnFuseMode (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister( AK8963_CNTL1, 0x0F,hspi);
}
void AK8963_Powerdown (SPI_HandleTypeDef *hspi)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	AK8963_WriteRegister( AK8963_CNTL1, 0x00,hspi);
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	2100      	movs	r1, #0
 8000848:	200a      	movs	r0, #10
 800084a:	f7ff ffc3 	bl	80007d4 <AK8963_WriteRegister>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <AK8963_Init>:
void AK8963_ConsMeasure2 (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister(AK8963_CNTL1, 0x06,hspi);
}
void AK8963_Init (SPI_HandleTypeDef *hspi)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	AK8963_Powerdown(hspi);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffec 	bl	800083c <AK8963_Powerdown>
	HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	@ 0x64
 8000866:	f000 fd0b 	bl	8001280 <HAL_Delay>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HMC5883_WriteRegister>:
 *  Created on: Dec 2, 2024
 *      Author: hung
 */
#include "mag.h"
void HMC5883_WriteRegister (uint8_t reg,uint8_t data, I2C_HandleTypeDef *hi2c)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af04      	add	r7, sp, #16
 8000878:	4603      	mov	r3, r0
 800087a:	603a      	str	r2, [r7, #0]
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	460b      	mov	r3, r1
 8000880:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(hi2c, HMC5883_ADDW, reg, 1, &data, 1, 100);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	2301      	movs	r3, #1
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	1dbb      	adds	r3, r7, #6
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	213d      	movs	r1, #61	@ 0x3d
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f001 f926 	bl	8001ae8 <HAL_I2C_Mem_Write>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <HMC5883_ReadRegister>:
void HMC5883_ReadRegister (uint8_t reg,uint8_t numberOfByte,uint8_t *data,I2C_HandleTypeDef *hi2c)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	60ba      	str	r2, [r7, #8]
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	460b      	mov	r3, r1
 80008b4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Read(hi2c, HMC5883_ADDR, reg, 1, data, numberOfByte, 100);
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	2164      	movs	r1, #100	@ 0x64
 80008c0:	9102      	str	r1, [sp, #8]
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2301      	movs	r3, #1
 80008ca:	213c      	movs	r1, #60	@ 0x3c
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f001 fa05 	bl	8001cdc <HAL_I2C_Mem_Read>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HMC5883_ConfigRate>:
void HMC5883_ConfigRate (uint8_t SAMPLE_AVER,uint8_t DO_RATE ,I2C_HandleTypeDef *hi2c)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	603a      	str	r2, [r7, #0]
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	460b      	mov	r3, r1
 80008e8:	71bb      	strb	r3, [r7, #6]
	//default is 15Hz and 1 sample aver
	HMC5883_WriteRegister(CONFIG_RESA,SAMPLE_AVER|DO_RATE, hi2c);
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ffbb 	bl	8000872 <HMC5883_WriteRegister>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <HMC5883_SetMode>:
//Config register B keep default;
void HMC5883_SetMode (uint8_t MODE,I2C_HandleTypeDef *hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
	//defautl is single measure mode
	HMC5883_WriteRegister(MODE_RES, MODE, hi2c);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff ffab 	bl	8000872 <HMC5883_WriteRegister>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <HMC5883_ReadAllData>:
void HMC5883_ReadAllData (int16_t *x, int16_t *y, int16_t *z,I2C_HandleTypeDef *hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
	uint8_t data[6];
	uint8_t reg = DATA_OUTH_X;
 8000932:	2303      	movs	r3, #3
 8000934:	75fb      	strb	r3, [r7, #23]

	HMC5883_ReadRegister(reg, 6,data, hi2c);
 8000936:	f107 0210 	add.w	r2, r7, #16
 800093a:	7df8      	ldrb	r0, [r7, #23]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2106      	movs	r1, #6
 8000940:	f7ff ffb0 	bl	80008a4 <HMC5883_ReadRegister>

	// Combine MSB and LSB for each axis
	*x = (int16_t)((data[0] << 8) | data[1]);
 8000944:	7c3b      	ldrb	r3, [r7, #16]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7c7b      	ldrb	r3, [r7, #17]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((data[2] << 8) | data[3]);
 8000956:	7cbb      	ldrb	r3, [r7, #18]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7cfb      	ldrb	r3, [r7, #19]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((data[4] << 8) | data[5]);
 8000968:	7d3b      	ldrb	r3, [r7, #20]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7d7b      	ldrb	r3, [r7, #21]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	801a      	strh	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b092      	sub	sp, #72	@ 0x48
 8000988:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint8_t mess[40]="0";
 800098a:	2330      	movs	r3, #48	@ 0x30
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 ff68 	bl	800486c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fc0e 	bl	80011bc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f85e 	bl	8000a60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 f9b4 	bl	8000d10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a8:	f000 f988 	bl	8000cbc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80009ac:	f000 f8cc 	bl	8000b48 <MX_SPI1_Init>
  MX_TIM1_Init();
 80009b0:	f000 f900 	bl	8000bb4 <MX_TIM1_Init>
  MX_I2C1_Init();
 80009b4:	f000 f89a 	bl	8000aec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  IMU9250_InitI2CMaster(&hspi1);
 80009b8:	4825      	ldr	r0, [pc, #148]	@ (8000a50 <main+0xcc>)
 80009ba:	f7ff ff2d 	bl	8000818 <IMU9250_InitI2CMaster>
  AK8963_Init(&hspi1);
 80009be:	4824      	ldr	r0, [pc, #144]	@ (8000a50 <main+0xcc>)
 80009c0:	f7ff ff49 	bl	8000856 <AK8963_Init>
  int16_t x[1],y[1],z[1];
  float x1[1],y1[1],z1[1];
  x1[0]=0;
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  y1[0]=0;
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  x1[0]=0;
 80009d0:	f04f 0300 	mov.w	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  IMU9250_SetGyroOffset(0,0,0,&hspi1);
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <main+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fe13 	bl	8000608 <IMU9250_SetGyroOffset>
  /* USER CODE END 2 */
  IMU9250_CalculateGyroOffset(x,y,z,&hspi1);
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	f107 0110 	add.w	r1, r7, #16
 80009ea:	f107 0014 	add.w	r0, r7, #20
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <main+0xcc>)
 80009f0:	f7ff fe51 	bl	8000696 <IMU9250_CalculateGyroOffset>
  HMC5883_ConfigRate(S8SAMPLE_AVER, 0x14, &hi2c1);
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <main+0xd0>)
 80009f6:	2114      	movs	r1, #20
 80009f8:	2060      	movs	r0, #96	@ 0x60
 80009fa:	f7ff ff6e 	bl	80008da <HMC5883_ConfigRate>
  HMC5883_SetMode(CONS_MEAS_MODE, &hi2c1);
 80009fe:	4915      	ldr	r1, [pc, #84]	@ (8000a54 <main+0xd0>)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff7f 	bl	8000904 <HMC5883_SetMode>
//	  int16_t x1,y1,z1;
//	  x1=IMU9250_ReadGyroRaw('X', &hspi1);
//	  y1=IMU9250_ReadGyroRaw('Y', &hspi1);
//	  z1=IMU9250_ReadGyroRaw('Z', &hspi1);

	  HMC5883_ReadAllData(x,y,z,&hi2c1);
 8000a06:	f107 020c 	add.w	r2, r7, #12
 8000a0a:	f107 0110 	add.w	r1, r7, #16
 8000a0e:	f107 0014 	add.w	r0, r7, #20
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <main+0xd0>)
 8000a14:	f7ff ff86 	bl	8000924 <HMC5883_ReadAllData>
//	  HAL_Delay(100);
//	  uint32_t currentTime = HAL_GetTick();
//	  float deltaTime = (currentTime - prevTime) / 1000.0f; // Đổi sang giây
//	  prevTime = currentTime;
//	  UpdateAngles(x,y,z,x1,y1,z1, deltaTime,&hspi1);
	  sprintf((char*)mess, "AngleX: %d Y: %d Z: %d   \n\r", (int)x[0],(int) y[0], (int)z[0]);
 8000a18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a22:	4619      	mov	r1, r3
 8000a24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a28:	f107 0018 	add.w	r0, r7, #24
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	4909      	ldr	r1, [pc, #36]	@ (8000a58 <main+0xd4>)
 8000a32:	f003 fefb 	bl	800482c <siprintf>
	  HAL_UART_Transmit(&huart2, mess,35, 100);
 8000a36:	f107 0118 	add.w	r1, r7, #24
 8000a3a:	2364      	movs	r3, #100	@ 0x64
 8000a3c:	2223      	movs	r2, #35	@ 0x23
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <main+0xd8>)
 8000a40:	f003 fd1f 	bl	8004482 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a48:	f000 fc1a 	bl	8001280 <HAL_Delay>
	  HMC5883_ReadAllData(x,y,z,&hi2c1);
 8000a4c:	bf00      	nop
 8000a4e:	e7da      	b.n	8000a06 <main+0x82>
 8000a50:	200000cc 	.word	0x200000cc
 8000a54:	20000078 	.word	0x20000078
 8000a58:	080051a4 	.word	0x080051a4
 8000a5c:	2000016c 	.word	0x2000016c

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	@ 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	@ 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fefc 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a86:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 ff3f 	bl	800292c <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f99c 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f9ac 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ade:	f000 f987 	bl	8000df0 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	@ 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_I2C1_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_I2C1_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b2a:	f000 fe99 	bl	8001860 <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 f95c 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	40005400 	.word	0x40005400
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <MX_SPI1_Init+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b7c:	2228      	movs	r2, #40	@ 0x28
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_SPI1_Init+0x64>)
 8000b9a:	f002 fad7 	bl	800314c <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f000 f924 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000cc 	.word	0x200000cc
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b092      	sub	sp, #72	@ 0x48
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fe44 	bl	800486c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000be6:	4a34      	ldr	r2, [pc, #208]	@ (8000cb8 <MX_TIM1_Init+0x104>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000bea:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000bec:	2247      	movs	r2, #71	@ 0x47
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c10:	4828      	ldr	r0, [pc, #160]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c12:	f003 f830 	bl	8003c76 <HAL_TIM_PWM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c1c:	f000 f8e8 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4821      	ldr	r0, [pc, #132]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c30:	f003 fb28 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c3a:	f000 f8d9 	bl	8000df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	2360      	movs	r3, #96	@ 0x60
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c64:	f003 f856 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c6e:	f000 f8bf 	bl	8000df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000c96:	f003 fb53 	bl	8004340 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ca0:	f000 f8a6 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <MX_TIM1_Init+0x100>)
 8000ca6:	f000 f981 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3748      	adds	r7, #72	@ 0x48
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000124 	.word	0x20000124
 8000cb8:	40012c00 	.word	0x40012c00

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <MX_USART2_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f003 fb75 	bl	80043e2 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f877 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000016c 	.word	0x2000016c
 8000d0c:	40004400 	.word	0x40004400

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2d      	ldr	r2, [pc, #180]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a27      	ldr	r2, [pc, #156]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d42:	f043 0320 	orr.w	r3, r3, #32
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <MX_GPIO_Init+0xd0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000d8a:	4816      	ldr	r0, [pc, #88]	@ (8000de4 <MX_GPIO_Init+0xd4>)
 8000d8c:	f000 fd2e 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_GPIO_Init+0xd8>)
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <MX_GPIO_Init+0xdc>)
 8000da6:	f000 fb9d 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000daa:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <MX_GPIO_Init+0xd4>)
 8000dc4:	f000 fb8e 	bl	80014e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2028      	movs	r0, #40	@ 0x28
 8000dce:	f000 fb52 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd2:	2028      	movs	r0, #40	@ 0x28
 8000dd4:	f000 fb6b 	bl	80014ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40011000 	.word	0x40011000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_MspInit+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_MspInit+0x60>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ed0 <HAL_I2C_MspInit+0x70>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e98:	23c0      	movs	r3, #192	@ 0xc0
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <HAL_I2C_MspInit+0x78>)
 8000eac:	f000 fb1a 	bl	80014e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <HAL_SPI_MspInit+0x88>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d12f      	bne.n	8000f5c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000f02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_SPI_MspInit+0x8c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f2c:	23a0      	movs	r3, #160	@ 0xa0
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <HAL_SPI_MspInit+0x90>)
 8000f40:	f000 fad0 	bl	80014e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f44:	2340      	movs	r3, #64	@ 0x40
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_SPI_MspInit+0x90>)
 8000f58:	f000 fac4 	bl	80014e4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800

08000f70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10b      	bne.n	8000f9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_TIM_MspPostInit+0x5c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d118      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_TIM_MspPostInit+0x60>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_TIM_MspPostInit+0x60>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <HAL_TIM_MspPostInit+0x60>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <HAL_TIM_MspPostInit+0x64>)
 8000ffa:	f000 fa73 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012c00 	.word	0x40012c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	@ (8001084 <HAL_UART_MspInit+0x70>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d123      	bne.n	800107c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0x74>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <HAL_UART_MspInit+0x74>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	61d3      	str	r3, [r2, #28]
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_UART_MspInit+0x74>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_UART_MspInit+0x74>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <HAL_UART_MspInit+0x74>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_UART_MspInit+0x74>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001064:	230c      	movs	r3, #12
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <HAL_UART_MspInit+0x78>)
 8001078:	f000 fa34 	bl	80014e4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40004400 	.word	0x40004400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8b2 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010f0:	f000 fb94 	bl	800181c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f003 fba8 	bl	800487c <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20005000 	.word	0x20005000
 8001158:	00000400 	.word	0x00000400
 800115c:	200001b4 	.word	0x200001b4
 8001160:	20000308 	.word	0x20000308

08001164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff fff8 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001176:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001178:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800118c:	4c09      	ldr	r4, [pc, #36]	@ (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f003 fb75 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fbf1 	bl	8000984 <main>
  bx lr
 80011a2:	4770      	bx	lr
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011ac:	08005230 	.word	0x08005230
  ldr r2, =_sbss
 80011b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011b4:	20000304 	.word	0x20000304

080011b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x28>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f947 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fe10 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f95f 	bl	80014ca <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f927 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000008 	.word	0x20000008
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_IncTick+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_IncTick+0x20>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a03      	ldr	r2, [pc, #12]	@ (8001268 <HAL_IncTick+0x20>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000008 	.word	0x20000008
 8001268:	200001b8 	.word	0x200001b8

0800126c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	@ (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200001b8 	.word	0x200001b8

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff fff0 	bl	800126c <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d005      	beq.n	80012a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_Delay+0x44>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a6:	bf00      	nop
 80012a8:	f7ff ffe0 	bl	800126c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f7      	bhi.n	80012a8 <HAL_Delay+0x28>
  {
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	@ (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	@ (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b08b      	sub	sp, #44	@ 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e169      	b.n	80017cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f8:	2201      	movs	r2, #1
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8158 	bne.w	80017c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a9a      	ldr	r2, [pc, #616]	@ (8001784 <HAL_GPIO_Init+0x2a0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d05e      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001520:	4a98      	ldr	r2, [pc, #608]	@ (8001784 <HAL_GPIO_Init+0x2a0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d875      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001526:	4a98      	ldr	r2, [pc, #608]	@ (8001788 <HAL_GPIO_Init+0x2a4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d058      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 800152c:	4a96      	ldr	r2, [pc, #600]	@ (8001788 <HAL_GPIO_Init+0x2a4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d86f      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001532:	4a96      	ldr	r2, [pc, #600]	@ (800178c <HAL_GPIO_Init+0x2a8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d052      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001538:	4a94      	ldr	r2, [pc, #592]	@ (800178c <HAL_GPIO_Init+0x2a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d869      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800153e:	4a94      	ldr	r2, [pc, #592]	@ (8001790 <HAL_GPIO_Init+0x2ac>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d04c      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001544:	4a92      	ldr	r2, [pc, #584]	@ (8001790 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d863      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800154a:	4a92      	ldr	r2, [pc, #584]	@ (8001794 <HAL_GPIO_Init+0x2b0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d046      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001550:	4a90      	ldr	r2, [pc, #576]	@ (8001794 <HAL_GPIO_Init+0x2b0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d85d      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d82a      	bhi.n	80015b0 <HAL_GPIO_Init+0xcc>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d859      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800155e:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <HAL_GPIO_Init+0x80>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	080015df 	.word	0x080015df
 8001568:	080015b9 	.word	0x080015b9
 800156c:	080015cb 	.word	0x080015cb
 8001570:	0800160d 	.word	0x0800160d
 8001574:	08001613 	.word	0x08001613
 8001578:	08001613 	.word	0x08001613
 800157c:	08001613 	.word	0x08001613
 8001580:	08001613 	.word	0x08001613
 8001584:	08001613 	.word	0x08001613
 8001588:	08001613 	.word	0x08001613
 800158c:	08001613 	.word	0x08001613
 8001590:	08001613 	.word	0x08001613
 8001594:	08001613 	.word	0x08001613
 8001598:	08001613 	.word	0x08001613
 800159c:	08001613 	.word	0x08001613
 80015a0:	08001613 	.word	0x08001613
 80015a4:	08001613 	.word	0x08001613
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	4a79      	ldr	r2, [pc, #484]	@ (8001798 <HAL_GPIO_Init+0x2b4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b6:	e02c      	b.n	8001612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e029      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	3304      	adds	r3, #4
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e024      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	3308      	adds	r3, #8
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e01f      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	330c      	adds	r3, #12
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e01a      	b.n	8001614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e6:	2304      	movs	r3, #4
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e013      	b.n	8001614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	611a      	str	r2, [r3, #16]
          break;
 80015fe:	e009      	b.n	8001614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	615a      	str	r2, [r3, #20]
          break;
 800160a:	e003      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x130>
          break;
 8001612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2bff      	cmp	r3, #255	@ 0xff
 8001618:	d801      	bhi.n	800161e <HAL_GPIO_Init+0x13a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_Init+0x13e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	@ 0xff
 8001628:	d802      	bhi.n	8001630 <HAL_GPIO_Init+0x14c>
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	e002      	b.n	8001636 <HAL_GPIO_Init+0x152>
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	3b08      	subs	r3, #8
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	210f      	movs	r1, #15
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	6a39      	ldr	r1, [r7, #32]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80b1 	beq.w	80017c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001664:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a4c      	ldr	r2, [pc, #304]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800167c:	4a48      	ldr	r2, [pc, #288]	@ (80017a0 <HAL_GPIO_Init+0x2bc>)
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a40      	ldr	r2, [pc, #256]	@ (80017a4 <HAL_GPIO_Init+0x2c0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a3f      	ldr	r2, [pc, #252]	@ (80017a8 <HAL_GPIO_Init+0x2c4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_Init+0x1e8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ac <HAL_GPIO_Init+0x2c8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_Init+0x1e4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3d      	ldr	r2, [pc, #244]	@ (80017b0 <HAL_GPIO_Init+0x2cc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_Init+0x1e0>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016c4:	2304      	movs	r3, #4
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016d0:	2300      	movs	r3, #0
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e2:	492f      	ldr	r1, [pc, #188]	@ (80017a0 <HAL_GPIO_Init+0x2bc>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	492c      	ldr	r1, [pc, #176]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	4928      	ldr	r1, [pc, #160]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001714:	4013      	ands	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	4922      	ldr	r1, [pc, #136]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	491e      	ldr	r1, [pc, #120]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4918      	ldr	r1, [pc, #96]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	4914      	ldr	r1, [pc, #80]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d021      	beq.n	80017b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	490e      	ldr	r1, [pc, #56]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e021      	b.n	80017c6 <HAL_GPIO_Init+0x2e2>
 8001782:	bf00      	nop
 8001784:	10320000 	.word	0x10320000
 8001788:	10310000 	.word	0x10310000
 800178c:	10220000 	.word	0x10220000
 8001790:	10210000 	.word	0x10210000
 8001794:	10120000 	.word	0x10120000
 8001798:	10110000 	.word	0x10110000
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40011000 	.word	0x40011000
 80017b0:	40011400 	.word	0x40011400
 80017b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4909      	ldr	r1, [pc, #36]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae8e 	bne.w	80014f8 <HAL_GPIO_Init+0x14>
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	372c      	adds	r7, #44	@ 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f806 	bl	800184c <HAL_GPIO_EXTI_Callback>
  }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e12b      	b.n	8001aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff faea 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	@ 0x24
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c4:	f001 fbfc 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 80018c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a81      	ldr	r2, [pc, #516]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d807      	bhi.n	80018e4 <HAL_I2C_Init+0x84>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a80      	ldr	r2, [pc, #512]	@ (8001ad8 <HAL_I2C_Init+0x278>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	e006      	b.n	80018f2 <HAL_I2C_Init+0x92>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a7d      	ldr	r2, [pc, #500]	@ (8001adc <HAL_I2C_Init+0x27c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e7      	b.n	8001aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a78      	ldr	r2, [pc, #480]	@ (8001ae0 <HAL_I2C_Init+0x280>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d802      	bhi.n	8001934 <HAL_I2C_Init+0xd4>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	e009      	b.n	8001948 <HAL_I2C_Init+0xe8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	4a69      	ldr	r2, [pc, #420]	@ (8001ae4 <HAL_I2C_Init+0x284>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	3301      	adds	r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800195a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	495c      	ldr	r1, [pc, #368]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 8001964:	428b      	cmp	r3, r1
 8001966:	d819      	bhi.n	800199c <HAL_I2C_Init+0x13c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e59      	subs	r1, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fbb1 f3f3 	udiv	r3, r1, r3
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <HAL_I2C_Init+0x138>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e59      	subs	r1, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	e051      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001998:	2304      	movs	r3, #4
 800199a:	e04f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_I2C_Init+0x168>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e012      	b.n	80019ee <HAL_I2C_Init+0x18e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x196>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e022      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10e      	bne.n	8001a1c <HAL_I2C_Init+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e58      	subs	r0, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	440b      	add	r3, r1
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	0099      	lsls	r1, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6809      	ldr	r1, [r1, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6911      	ldr	r1, [r2, #16]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68d2      	ldr	r2, [r2, #12]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	001e847f 	.word	0x001e847f
 8001adc:	003d08ff 	.word	0x003d08ff
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	460b      	mov	r3, r1
 8001afc:	813b      	strh	r3, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b02:	f7ff fbb3 	bl	800126c <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	f040 80d9 	bne.w	8001cc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2319      	movs	r3, #25
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	496d      	ldr	r1, [pc, #436]	@ (8001cd4 <HAL_I2C_Mem_Write+0x1ec>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fccd 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0cc      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_I2C_Mem_Write+0x56>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0c5      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d007      	beq.n	8001b64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2221      	movs	r2, #33	@ 0x21
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba6:	88f8      	ldrh	r0, [r7, #6]
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	8979      	ldrh	r1, [r7, #10]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fb04 	bl	80021c4 <I2C_RequestMemoryWrite>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e081      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fd92 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d107      	bne.n	8001bee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d11b      	bne.n	8001c68 <HAL_I2C_Mem_Write+0x180>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1aa      	bne.n	8001bc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fd85 	bl	8002784 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e016      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	00100002 	.word	0x00100002
 8001cd8:	ffff0000 	.word	0xffff0000

08001cdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfa:	f7ff fab7 	bl	800126c <HAL_GetTick>
 8001cfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	f040 8250 	bne.w	80021ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2319      	movs	r3, #25
 8001d14:	2201      	movs	r2, #1
 8001d16:	4982      	ldr	r1, [pc, #520]	@ (8001f20 <HAL_I2C_Mem_Read+0x244>)
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fbd1 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
 8001d26:	e243      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Mem_Read+0x5a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e23c      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d007      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2222      	movs	r2, #34	@ 0x22
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2240      	movs	r2, #64	@ 0x40
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a62      	ldr	r2, [pc, #392]	@ (8001f24 <HAL_I2C_Mem_Read+0x248>)
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d9e:	88f8      	ldrh	r0, [r7, #6]
 8001da0:	893a      	ldrh	r2, [r7, #8]
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4603      	mov	r3, r0
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fa9e 	bl	80022f0 <I2C_RequestMemoryRead>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1f8      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d113      	bne.n	8001dee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e1cc      	b.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d11e      	bne.n	8001e34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e04:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e06:	b672      	cpsid	i
}
 8001e08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e30:	b662      	cpsie	i
}
 8001e32:	e035      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d11e      	bne.n	8001e7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e76:	b662      	cpsie	i
}
 8001e78:	e012      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ea0:	e172      	b.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	f200 811f 	bhi.w	80020ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d123      	bne.n	8001efc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fcab 	bl	8002814 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e173      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001efa:	e145      	b.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d152      	bne.n	8001faa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4906      	ldr	r1, [pc, #24]	@ (8001f28 <HAL_I2C_Mem_Read+0x24c>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fad6 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e148      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
 8001f1e:	bf00      	nop
 8001f20:	00100002 	.word	0x00100002
 8001f24:	ffff0000 	.word	0xffff0000
 8001f28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f72:	b662      	cpsie	i
}
 8001f74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fa8:	e0ee      	b.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4981      	ldr	r1, [pc, #516]	@ (80021b8 <HAL_I2C_Mem_Read+0x4dc>)
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fa83 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0f5      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800200a:	4b6c      	ldr	r3, [pc, #432]	@ (80021bc <HAL_I2C_Mem_Read+0x4e0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	4a6b      	ldr	r2, [pc, #428]	@ (80021c0 <HAL_I2C_Mem_Read+0x4e4>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a1a      	lsrs	r2, r3, #8
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00da      	lsls	r2, r3, #3
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	3b01      	subs	r3, #1
 8002028:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002052:	b662      	cpsie	i
}
 8002054:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0a6      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d1d9      	bne.n	8002024 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020b2:	b662      	cpsie	i
}
 80020b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020e8:	e04e      	b.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fb90 	bl	8002814 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e058      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b04      	cmp	r3, #4
 800213c:	d124      	bne.n	8002188 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	2b03      	cmp	r3, #3
 8002144:	d107      	bne.n	8002156 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002154:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae88 	bne.w	8001ea2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	@ 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	00010004 	.word	0x00010004
 80021bc:	20000000 	.word	0x20000000
 80021c0:	14f8b589 	.word	0x14f8b589

080021c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]
 80021d6:	460b      	mov	r3, r1
 80021d8:	813b      	strh	r3, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f960 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002214:	d103      	bne.n	800221e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e05f      	b.n	80022e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	492d      	ldr	r1, [pc, #180]	@ (80022ec <I2C_RequestMemoryWrite+0x128>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f9bb 	bl	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e04c      	b.n	80022e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa46 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e02b      	b.n	80022e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002290:	893b      	ldrh	r3, [r7, #8]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	e021      	b.n	80022e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa20 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00d      	beq.n	80022d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d107      	bne.n	80022d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e005      	b.n	80022e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d6:	893b      	ldrh	r3, [r7, #8]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	00010002 	.word	0x00010002

080022f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002318:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002328:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	2200      	movs	r2, #0
 8002332:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f8c2 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002350:	d103      	bne.n	800235a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0aa      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800236c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	4952      	ldr	r1, [pc, #328]	@ (80024bc <I2C_RequestMemoryRead+0x1cc>)
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f91d 	bl	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e097      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f9a8 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d107      	bne.n	80023c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e076      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023cc:	893b      	ldrh	r3, [r7, #8]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	e021      	b.n	800241c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d8:	893b      	ldrh	r3, [r7, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f982 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e050      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800241c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241e:	6a39      	ldr	r1, [r7, #32]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f967 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	2b04      	cmp	r3, #4
 8002432:	d107      	bne.n	8002444 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002442:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e035      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002456:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2200      	movs	r2, #0
 8002460:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f82b 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247e:	d103      	bne.n	8002488 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e013      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800248c:	897b      	ldrh	r3, [r7, #10]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	6a3a      	ldr	r2, [r7, #32]
 80024a0:	4906      	ldr	r1, [pc, #24]	@ (80024bc <I2C_RequestMemoryRead+0x1cc>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f886 	bl	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010002 	.word	0x00010002

080024c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d0:	e048      	b.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d044      	beq.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7fe fec7 	bl	800126c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d139      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10d      	bne.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	e00c      	b.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	43da      	mvns	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	429a      	cmp	r2, r3
 8002534:	d116      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e023      	b.n	80025ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0c1b      	lsrs	r3, r3, #16
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0xca>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	43da      	mvns	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	e00c      	b.n	80025a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	43da      	mvns	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d093      	beq.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c2:	e071      	b.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d2:	d123      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e067      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d041      	beq.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7fe fe22 	bl	800126c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d136      	bne.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10c      	bne.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e00b      	b.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	43da      	mvns	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e021      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10c      	bne.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e00b      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f af6d 	bne.w	80025c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002700:	e034      	b.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f8e3 	bl	80028ce <I2C_IsAcknowledgeFailed>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e034      	b.n	800277c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d028      	beq.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe fda7 	bl	800126c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11d      	bne.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d016      	beq.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	d1c3      	bne.n	8002702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002790:	e034      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f89b 	bl	80028ce <I2C_IsAcknowledgeFailed>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e034      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d028      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe fd5f 	bl	800126c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d016      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1c3      	bne.n	8002792 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002820:	e049      	b.n	80028b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d119      	bne.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e030      	b.n	80028c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002864:	f7fe fd02 	bl	800126c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11d      	bne.n	80028b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b40      	cmp	r3, #64	@ 0x40
 8002886:	d016      	beq.n	80028b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c0:	2b40      	cmp	r3, #64	@ 0x40
 80028c2:	d1ae      	bne.n	8002822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e4:	d11b      	bne.n	800291e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fc30 	bl	800126c <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fc2c 	bl	800126c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fc1c 	bl	800126c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fc18 	bl	800126c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fbd1 	bl	800126c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe fbcd 	bl	800126c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fbb0 	bl	800126c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fe fbac 	bl	800126c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe fb90 	bl	800126c <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe fb8c 	bl	800126c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 face 	bl	8003110 <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fb76 	bl	800126c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fe fb72 	bl	800126c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fb33 	bl	800126c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fb2f 	bl	800126c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	@ 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fae3 	bl	800126c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fadf 	bl	800126c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe facd 	bl	800126c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fac9 	bl	800126c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fa9d 	bl	800126c <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fa99 	bl	800126c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fa6d 	bl	800126c <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe fa69 	bl	800126c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fa56 	bl	800126c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fa52 	bl	800126c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe f9a4 	bl	800126c <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe f9a0 	bl	800126c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f902 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080051c0 	.word	0x080051c0
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x30>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x36>
 8003032:	e027      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	613b      	str	r3, [r7, #16]
      break;
 8003038:	e027      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0c9b      	lsrs	r3, r3, #18
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0c5b      	lsrs	r3, r3, #17
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	4a11      	ldr	r2, [pc, #68]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003066:	fb03 f202 	mul.w	r2, r3, r2
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e004      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	613b      	str	r3, [r7, #16]
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	693b      	ldr	r3, [r7, #16]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	080051d8 	.word	0x080051d8
 80030a4:	080051e8 	.word	0x080051e8
 80030a8:	003d0900 	.word	0x003d0900

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x10>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff2 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080051d0 	.word	0x080051d0

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffde 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	080051d0 	.word	0x080051d0

08003110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <RCC_Delay+0x34>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <RCC_Delay+0x38>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800312c:	bf00      	nop
  }
  while (Delay --);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <RCC_Delay+0x1c>
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000000 	.word	0x20000000
 8003148:	10624dd3 	.word	0x10624dd3

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e076      	b.n	800324c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316e:	d009      	beq.n	8003184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
 8003176:	e005      	b.n	8003184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fe9c 	bl	8000edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	0c1a      	lsrs	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f002 0204 	and.w	r2, r2, #4
 800322a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003264:	f7fe f802 	bl	800126c <HAL_GetTick>
 8003268:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	e12a      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_Transmit+0x36>
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e122      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SPI_Transmit+0x48>
 8003298:	2302      	movs	r3, #2
 800329a:	e11b      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ea:	d10f      	bne.n	800330c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	d007      	beq.n	800332a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003332:	d152      	bne.n	80033da <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0xee>
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d145      	bne.n	80033ce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	881a      	ldrh	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	1c9a      	adds	r2, r3, #2
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003366:	e032      	b.n	80033ce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d112      	bne.n	800339c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	86da      	strh	r2, [r3, #54]	@ 0x36
 800339a:	e018      	b.n	80033ce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339c:	f7fd ff66 	bl	800126c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d803      	bhi.n	80033b4 <HAL_SPI_Transmit+0x160>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d102      	bne.n	80033ba <HAL_SPI_Transmit+0x166>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e082      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1c7      	bne.n	8003368 <HAL_SPI_Transmit+0x114>
 80033d8:	e053      	b.n	8003482 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x194>
 80033e2:	8b7b      	ldrh	r3, [r7, #26]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d147      	bne.n	8003478 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800340e:	e033      	b.n	8003478 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d113      	bne.n	8003446 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003444:	e018      	b.n	8003478 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fd ff11 	bl	800126c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x20a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x210>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e02d      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c6      	bne.n	8003410 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fbc4 	bl	8003c14 <SPI_EndRxTxTransaction>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e104      	b.n	8003706 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003504:	d112      	bne.n	800352c <HAL_SPI_Receive+0x50>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10e      	bne.n	800352c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2204      	movs	r2, #4
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8f3 	bl	800370e <HAL_SPI_TransmitReceive>
 8003528:	4603      	mov	r3, r0
 800352a:	e0ec      	b.n	8003706 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352c:	f7fd fe9e 	bl	800126c <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_SPI_Receive+0x62>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0e1      	b.n	8003706 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_SPI_Receive+0x74>
 800354c:	2302      	movs	r3, #2
 800354e:	e0da      	b.n	8003706 <HAL_SPI_Receive+0x22a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2204      	movs	r2, #4
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359e:	d10f      	bne.n	80035c0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d007      	beq.n	80035de <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d170      	bne.n	80036c8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e6:	e035      	b.n	8003654 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d115      	bne.n	8003622 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f103 020c 	add.w	r2, r3, #12
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003620:	e018      	b.n	8003654 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003622:	f7fd fe23 	bl	800126c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d803      	bhi.n	800363a <HAL_SPI_Receive+0x15e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d102      	bne.n	8003640 <HAL_SPI_Receive+0x164>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e058      	b.n	8003706 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1c4      	bne.n	80035e8 <HAL_SPI_Receive+0x10c>
 800365e:	e038      	b.n	80036d2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d113      	bne.n	8003696 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	b292      	uxth	r2, r2
 800367a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	1c9a      	adds	r2, r3, #2
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003694:	e018      	b.n	80036c8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003696:	f7fd fde9 	bl	800126c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d803      	bhi.n	80036ae <HAL_SPI_Receive+0x1d2>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x1d8>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e01e      	b.n	8003706 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1c6      	bne.n	8003660 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa4a 	bl	8003b70 <SPI_EndRxTransaction>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003704:	2300      	movs	r3, #0
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	@ 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003720:	f7fd fda4 	bl	800126c <HAL_GetTick>
 8003724:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800372c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d00c      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x4a>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003744:	d106      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x46>
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d001      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	e17f      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_SPI_TransmitReceive+0x5c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_SPI_TransmitReceive+0x5c>
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e174      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_SPI_TransmitReceive+0x6e>
 8003778:	2302      	movs	r3, #2
 800377a:	e16d      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b04      	cmp	r3, #4
 800378e:	d003      	beq.n	8003798 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2205      	movs	r2, #5
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d8:	2b40      	cmp	r3, #64	@ 0x40
 80037da:	d007      	beq.n	80037ec <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f4:	d17e      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_TransmitReceive+0xf6>
 80037fe:	8afb      	ldrh	r3, [r7, #22]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d16c      	bne.n	80038de <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003828:	e059      	b.n	80038de <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d11b      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x162>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_SPI_TransmitReceive+0x162>
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	2b01      	cmp	r3, #1
 8003846:	d113      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	881a      	ldrh	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	1c9a      	adds	r2, r3, #2
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d119      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x1a4>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d014      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003892:	b292      	uxth	r2, r2
 8003894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ae:	2301      	movs	r3, #1
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b2:	f7fd fcdb 	bl	800126c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038be:	429a      	cmp	r2, r3
 80038c0:	d80d      	bhi.n	80038de <HAL_SPI_TransmitReceive+0x1d0>
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d009      	beq.n	80038de <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0bc      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1a0      	bne.n	800382a <HAL_SPI_TransmitReceive+0x11c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d19b      	bne.n	800382a <HAL_SPI_TransmitReceive+0x11c>
 80038f2:	e082      	b.n	80039fa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x1f4>
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d171      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003928:	e05d      	b.n	80039e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11c      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x264>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x264>
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	2b01      	cmp	r3, #1
 8003946:	d114      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d119      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x2a6>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b4:	f7fd fc5a 	bl	800126c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d803      	bhi.n	80039cc <HAL_SPI_TransmitReceive+0x2be>
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d102      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x2c4>
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e038      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d19c      	bne.n	800392a <HAL_SPI_TransmitReceive+0x21c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d197      	bne.n	800392a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f908 	bl	8003c14 <SPI_EndRxTxTransaction>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01d      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a70:	f7fd fbfc 	bl	800126c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a80:	f7fd fbf4 	bl	800126c <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a96:	e054      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d050      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa0:	f7fd fbe4 	bl	800126c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d902      	bls.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13d      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ace:	d111      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad8:	d004      	beq.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae2:	d107      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afc:	d10f      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e017      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d19b      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b84:	d111      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8e:	d004      	beq.n	8003b9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b98:	d107      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb2:	d117      	bne.n	8003be4 <SPI_EndRxTransaction+0x74>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d112      	bne.n	8003be4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ff49 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2180      	movs	r1, #128	@ 0x80
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ff36 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e000      	b.n	8003c0c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2201      	movs	r2, #1
 8003c28:	2102      	movs	r1, #2
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ff18 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e013      	b.n	8003c6e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2180      	movs	r1, #128	@ 0x80
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff ff05 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e041      	b.n	8003d0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd f967 	bl	8000f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 f8ef 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f8f6 	bl	8003f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f93c 	bl	8004040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f985 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f9cf 	bl	80041e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <TIM_Base_SetConfig+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <TIM_Base_SetConfig+0xd8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <TIM_Base_SetConfig+0xd4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <TIM_Base_SetConfig+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0d      	ldr	r2, [pc, #52]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800

08003f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <TIM_OC1_SetConfig+0xc8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10c      	bne.n	8003fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0308 	bic.w	r3, r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a13      	ldr	r2, [pc, #76]	@ (800403c <TIM_OC1_SetConfig+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d111      	bne.n	8004016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00

08004040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0320 	bic.w	r3, r3, #32
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <TIM_OC2_SetConfig+0xd0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <TIM_OC2_SetConfig+0xd0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00

08004114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <TIM_OC3_SetConfig+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10d      	bne.n	800418e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <TIM_OC3_SetConfig+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d113      	bne.n	80041be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00

080041e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0f      	ldr	r2, [pc, #60]	@ (8004280 <TIM_OC4_SetConfig+0x98>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800424e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e046      	b.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d009      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a10      	ldr	r2, [pc, #64]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10c      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800

08004340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e03d      	b.n	80043d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e042      	b.n	800447a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc fe03 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2224      	movs	r2, #36	@ 0x24
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f972 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800443a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800444a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b08a      	sub	sp, #40	@ 0x28
 8004486:	af02      	add	r7, sp, #8
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d175      	bne.n	800458e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x2c>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06e      	b.n	8004590 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2221      	movs	r2, #33	@ 0x21
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c0:	f7fc fed4 	bl	800126c <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	d108      	bne.n	80044ee <HAL_UART_Transmit+0x6c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e003      	b.n	80044f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044f6:	e02e      	b.n	8004556 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f848 	bl	8004598 <UART_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e03a      	b.n	8004590 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	3302      	adds	r3, #2
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e007      	b.n	8004548 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3301      	adds	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1cb      	bne.n	80044f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	2140      	movs	r1, #64	@ 0x40
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f814 	bl	8004598 <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e006      	b.n	8004590 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a8:	e03b      	b.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d037      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fc fe5b 	bl	800126c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e03a      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d023      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d020      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	d01d      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d116      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f81d 	bl	800464a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2208      	movs	r2, #8
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e00f      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	429a      	cmp	r2, r3
 800463e:	d0b4      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b095      	sub	sp, #84	@ 0x54
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004672:	643a      	str	r2, [r7, #64]	@ 0x40
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e5      	bne.n	8004652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	61fb      	str	r3, [r7, #28]
   return(result);
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e5      	bne.n	8004686 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d119      	bne.n	80046f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0310 	bic.w	r3, r3, #16
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e2:	61ba      	str	r2, [r7, #24]
 80046e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6979      	ldr	r1, [r7, #20]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	613b      	str	r3, [r7, #16]
   return(result);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004704:	bf00      	nop
 8004706:	3754      	adds	r7, #84	@ 0x54
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800474a:	f023 030c 	bic.w	r3, r3, #12
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	430b      	orrs	r3, r1
 8004756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2c      	ldr	r2, [pc, #176]	@ (8004824 <UART_SetConfig+0x114>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fcb6 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	e002      	b.n	8004786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7fe fc9e 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a22      	ldr	r2, [pc, #136]	@ (8004828 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	0119      	lsls	r1, r3, #4
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <UART_SetConfig+0x118>)
 80047be:	fba3 0302 	umull	r0, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2064      	movs	r0, #100	@ 0x64
 80047c6:	fb00 f303 	mul.w	r3, r0, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	3332      	adds	r3, #50	@ 0x32
 80047d0:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <UART_SetConfig+0x118>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047dc:	4419      	add	r1, r3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <UART_SetConfig+0x118>)
 80047f6:	fba3 0302 	umull	r0, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2064      	movs	r0, #100	@ 0x64
 80047fe:	fb00 f303 	mul.w	r3, r0, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	@ 0x32
 8004808:	4a07      	ldr	r2, [pc, #28]	@ (8004828 <UART_SetConfig+0x118>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	440a      	add	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40013800 	.word	0x40013800
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <siprintf>:
 800482c:	b40e      	push	{r1, r2, r3}
 800482e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004832:	b500      	push	{lr}
 8004834:	b09c      	sub	sp, #112	@ 0x70
 8004836:	ab1d      	add	r3, sp, #116	@ 0x74
 8004838:	9002      	str	r0, [sp, #8]
 800483a:	9006      	str	r0, [sp, #24]
 800483c:	9107      	str	r1, [sp, #28]
 800483e:	9104      	str	r1, [sp, #16]
 8004840:	4808      	ldr	r0, [pc, #32]	@ (8004864 <siprintf+0x38>)
 8004842:	4909      	ldr	r1, [pc, #36]	@ (8004868 <siprintf+0x3c>)
 8004844:	f853 2b04 	ldr.w	r2, [r3], #4
 8004848:	9105      	str	r1, [sp, #20]
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	a902      	add	r1, sp, #8
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	f000 f992 	bl	8004b78 <_svfiprintf_r>
 8004854:	2200      	movs	r2, #0
 8004856:	9b02      	ldr	r3, [sp, #8]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	b01c      	add	sp, #112	@ 0x70
 800485c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004860:	b003      	add	sp, #12
 8004862:	4770      	bx	lr
 8004864:	2000000c 	.word	0x2000000c
 8004868:	ffff0208 	.word	0xffff0208

0800486c <memset>:
 800486c:	4603      	mov	r3, r0
 800486e:	4402      	add	r2, r0
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	f803 1b01 	strb.w	r1, [r3], #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	@ (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	2000000c 	.word	0x2000000c

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2600      	movs	r6, #0
 800488c:	4d0c      	ldr	r5, [pc, #48]	@ (80048c0 <__libc_init_array+0x38>)
 800488e:	4c0d      	ldr	r4, [pc, #52]	@ (80048c4 <__libc_init_array+0x3c>)
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	f000 fc78 	bl	800518c <_init>
 800489c:	2600      	movs	r6, #0
 800489e:	4d0a      	ldr	r5, [pc, #40]	@ (80048c8 <__libc_init_array+0x40>)
 80048a0:	4c0a      	ldr	r4, [pc, #40]	@ (80048cc <__libc_init_array+0x44>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08005228 	.word	0x08005228
 80048c4:	08005228 	.word	0x08005228
 80048c8:	08005228 	.word	0x08005228
 80048cc:	0800522c 	.word	0x0800522c

080048d0 <__retarget_lock_acquire_recursive>:
 80048d0:	4770      	bx	lr

080048d2 <__retarget_lock_release_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <_free_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	2900      	cmp	r1, #0
 80048da:	d040      	beq.n	800495e <_free_r+0x8a>
 80048dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e0:	1f0c      	subs	r4, r1, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfb8      	it	lt
 80048e6:	18e4      	addlt	r4, r4, r3
 80048e8:	f000 f8de 	bl	8004aa8 <__malloc_lock>
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <_free_r+0x8c>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	b933      	cbnz	r3, 8004900 <_free_r+0x2c>
 80048f2:	6063      	str	r3, [r4, #4]
 80048f4:	6014      	str	r4, [r2, #0]
 80048f6:	4628      	mov	r0, r5
 80048f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048fc:	f000 b8da 	b.w	8004ab4 <__malloc_unlock>
 8004900:	42a3      	cmp	r3, r4
 8004902:	d908      	bls.n	8004916 <_free_r+0x42>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	1821      	adds	r1, r4, r0
 8004908:	428b      	cmp	r3, r1
 800490a:	bf01      	itttt	eq
 800490c:	6819      	ldreq	r1, [r3, #0]
 800490e:	685b      	ldreq	r3, [r3, #4]
 8004910:	1809      	addeq	r1, r1, r0
 8004912:	6021      	streq	r1, [r4, #0]
 8004914:	e7ed      	b.n	80048f2 <_free_r+0x1e>
 8004916:	461a      	mov	r2, r3
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	b10b      	cbz	r3, 8004920 <_free_r+0x4c>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d9fa      	bls.n	8004916 <_free_r+0x42>
 8004920:	6811      	ldr	r1, [r2, #0]
 8004922:	1850      	adds	r0, r2, r1
 8004924:	42a0      	cmp	r0, r4
 8004926:	d10b      	bne.n	8004940 <_free_r+0x6c>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	4401      	add	r1, r0
 800492c:	1850      	adds	r0, r2, r1
 800492e:	4283      	cmp	r3, r0
 8004930:	6011      	str	r1, [r2, #0]
 8004932:	d1e0      	bne.n	80048f6 <_free_r+0x22>
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4408      	add	r0, r1
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	e7da      	b.n	80048f6 <_free_r+0x22>
 8004940:	d902      	bls.n	8004948 <_free_r+0x74>
 8004942:	230c      	movs	r3, #12
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	e7d6      	b.n	80048f6 <_free_r+0x22>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	1821      	adds	r1, r4, r0
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1809      	addeq	r1, r1, r0
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	6054      	str	r4, [r2, #4]
 800495c:	e7cb      	b.n	80048f6 <_free_r+0x22>
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20000300 	.word	0x20000300

08004964 <sbrk_aligned>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4e0f      	ldr	r6, [pc, #60]	@ (80049a4 <sbrk_aligned+0x40>)
 8004968:	460c      	mov	r4, r1
 800496a:	6831      	ldr	r1, [r6, #0]
 800496c:	4605      	mov	r5, r0
 800496e:	b911      	cbnz	r1, 8004976 <sbrk_aligned+0x12>
 8004970:	f000 fbaa 	bl	80050c8 <_sbrk_r>
 8004974:	6030      	str	r0, [r6, #0]
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 fba5 	bl	80050c8 <_sbrk_r>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d103      	bne.n	800498a <sbrk_aligned+0x26>
 8004982:	f04f 34ff 	mov.w	r4, #4294967295
 8004986:	4620      	mov	r0, r4
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	1cc4      	adds	r4, r0, #3
 800498c:	f024 0403 	bic.w	r4, r4, #3
 8004990:	42a0      	cmp	r0, r4
 8004992:	d0f8      	beq.n	8004986 <sbrk_aligned+0x22>
 8004994:	1a21      	subs	r1, r4, r0
 8004996:	4628      	mov	r0, r5
 8004998:	f000 fb96 	bl	80050c8 <_sbrk_r>
 800499c:	3001      	adds	r0, #1
 800499e:	d1f2      	bne.n	8004986 <sbrk_aligned+0x22>
 80049a0:	e7ef      	b.n	8004982 <sbrk_aligned+0x1e>
 80049a2:	bf00      	nop
 80049a4:	200002fc 	.word	0x200002fc

080049a8 <_malloc_r>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	1ccd      	adds	r5, r1, #3
 80049ae:	f025 0503 	bic.w	r5, r5, #3
 80049b2:	3508      	adds	r5, #8
 80049b4:	2d0c      	cmp	r5, #12
 80049b6:	bf38      	it	cc
 80049b8:	250c      	movcc	r5, #12
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	4606      	mov	r6, r0
 80049be:	db01      	blt.n	80049c4 <_malloc_r+0x1c>
 80049c0:	42a9      	cmp	r1, r5
 80049c2:	d904      	bls.n	80049ce <_malloc_r+0x26>
 80049c4:	230c      	movs	r3, #12
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	2000      	movs	r0, #0
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aa4 <_malloc_r+0xfc>
 80049d2:	f000 f869 	bl	8004aa8 <__malloc_lock>
 80049d6:	f8d8 3000 	ldr.w	r3, [r8]
 80049da:	461c      	mov	r4, r3
 80049dc:	bb44      	cbnz	r4, 8004a30 <_malloc_r+0x88>
 80049de:	4629      	mov	r1, r5
 80049e0:	4630      	mov	r0, r6
 80049e2:	f7ff ffbf 	bl	8004964 <sbrk_aligned>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	4604      	mov	r4, r0
 80049ea:	d158      	bne.n	8004a9e <_malloc_r+0xf6>
 80049ec:	f8d8 4000 	ldr.w	r4, [r8]
 80049f0:	4627      	mov	r7, r4
 80049f2:	2f00      	cmp	r7, #0
 80049f4:	d143      	bne.n	8004a7e <_malloc_r+0xd6>
 80049f6:	2c00      	cmp	r4, #0
 80049f8:	d04b      	beq.n	8004a92 <_malloc_r+0xea>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	4639      	mov	r1, r7
 80049fe:	4630      	mov	r0, r6
 8004a00:	eb04 0903 	add.w	r9, r4, r3
 8004a04:	f000 fb60 	bl	80050c8 <_sbrk_r>
 8004a08:	4581      	cmp	r9, r0
 8004a0a:	d142      	bne.n	8004a92 <_malloc_r+0xea>
 8004a0c:	6821      	ldr	r1, [r4, #0]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	1a6d      	subs	r5, r5, r1
 8004a12:	4629      	mov	r1, r5
 8004a14:	f7ff ffa6 	bl	8004964 <sbrk_aligned>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d03a      	beq.n	8004a92 <_malloc_r+0xea>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	442b      	add	r3, r5
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	f8d8 3000 	ldr.w	r3, [r8]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	bb62      	cbnz	r2, 8004a84 <_malloc_r+0xdc>
 8004a2a:	f8c8 7000 	str.w	r7, [r8]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xa8>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d420      	bmi.n	8004a78 <_malloc_r+0xd0>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xc2>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 f82f 	bl	8004ab4 <__malloc_unlock>
 8004a56:	f104 000b 	add.w	r0, r4, #11
 8004a5a:	1d23      	adds	r3, r4, #4
 8004a5c:	f020 0007 	bic.w	r0, r0, #7
 8004a60:	1ac2      	subs	r2, r0, r3
 8004a62:	bf1c      	itt	ne
 8004a64:	1a1b      	subne	r3, r3, r0
 8004a66:	50a3      	strne	r3, [r4, r2]
 8004a68:	e7af      	b.n	80049ca <_malloc_r+0x22>
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	bf0c      	ite	eq
 8004a70:	f8c8 2000 	streq.w	r2, [r8]
 8004a74:	605a      	strne	r2, [r3, #4]
 8004a76:	e7eb      	b.n	8004a50 <_malloc_r+0xa8>
 8004a78:	4623      	mov	r3, r4
 8004a7a:	6864      	ldr	r4, [r4, #4]
 8004a7c:	e7ae      	b.n	80049dc <_malloc_r+0x34>
 8004a7e:	463c      	mov	r4, r7
 8004a80:	687f      	ldr	r7, [r7, #4]
 8004a82:	e7b6      	b.n	80049f2 <_malloc_r+0x4a>
 8004a84:	461a      	mov	r2, r3
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	d1fb      	bne.n	8004a84 <_malloc_r+0xdc>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6053      	str	r3, [r2, #4]
 8004a90:	e7de      	b.n	8004a50 <_malloc_r+0xa8>
 8004a92:	230c      	movs	r3, #12
 8004a94:	4630      	mov	r0, r6
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f000 f80c 	bl	8004ab4 <__malloc_unlock>
 8004a9c:	e794      	b.n	80049c8 <_malloc_r+0x20>
 8004a9e:	6005      	str	r5, [r0, #0]
 8004aa0:	e7d6      	b.n	8004a50 <_malloc_r+0xa8>
 8004aa2:	bf00      	nop
 8004aa4:	20000300 	.word	0x20000300

08004aa8 <__malloc_lock>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	@ (8004ab0 <__malloc_lock+0x8>)
 8004aaa:	f7ff bf11 	b.w	80048d0 <__retarget_lock_acquire_recursive>
 8004aae:	bf00      	nop
 8004ab0:	200002f8 	.word	0x200002f8

08004ab4 <__malloc_unlock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	@ (8004abc <__malloc_unlock+0x8>)
 8004ab6:	f7ff bf0c 	b.w	80048d2 <__retarget_lock_release_recursive>
 8004aba:	bf00      	nop
 8004abc:	200002f8 	.word	0x200002f8

08004ac0 <__ssputs_r>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	461f      	mov	r7, r3
 8004ac6:	688e      	ldr	r6, [r1, #8]
 8004ac8:	4682      	mov	sl, r0
 8004aca:	42be      	cmp	r6, r7
 8004acc:	460c      	mov	r4, r1
 8004ace:	4690      	mov	r8, r2
 8004ad0:	680b      	ldr	r3, [r1, #0]
 8004ad2:	d82d      	bhi.n	8004b30 <__ssputs_r+0x70>
 8004ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ad8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004adc:	d026      	beq.n	8004b2c <__ssputs_r+0x6c>
 8004ade:	6965      	ldr	r5, [r4, #20]
 8004ae0:	6909      	ldr	r1, [r1, #16]
 8004ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae6:	eba3 0901 	sub.w	r9, r3, r1
 8004aea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aee:	1c7b      	adds	r3, r7, #1
 8004af0:	444b      	add	r3, r9
 8004af2:	106d      	asrs	r5, r5, #1
 8004af4:	429d      	cmp	r5, r3
 8004af6:	bf38      	it	cc
 8004af8:	461d      	movcc	r5, r3
 8004afa:	0553      	lsls	r3, r2, #21
 8004afc:	d527      	bpl.n	8004b4e <__ssputs_r+0x8e>
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7ff ff52 	bl	80049a8 <_malloc_r>
 8004b04:	4606      	mov	r6, r0
 8004b06:	b360      	cbz	r0, 8004b62 <__ssputs_r+0xa2>
 8004b08:	464a      	mov	r2, r9
 8004b0a:	6921      	ldr	r1, [r4, #16]
 8004b0c:	f000 fafa 	bl	8005104 <memcpy>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	6126      	str	r6, [r4, #16]
 8004b1e:	444e      	add	r6, r9
 8004b20:	6026      	str	r6, [r4, #0]
 8004b22:	463e      	mov	r6, r7
 8004b24:	6165      	str	r5, [r4, #20]
 8004b26:	eba5 0509 	sub.w	r5, r5, r9
 8004b2a:	60a5      	str	r5, [r4, #8]
 8004b2c:	42be      	cmp	r6, r7
 8004b2e:	d900      	bls.n	8004b32 <__ssputs_r+0x72>
 8004b30:	463e      	mov	r6, r7
 8004b32:	4632      	mov	r2, r6
 8004b34:	4641      	mov	r1, r8
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	f000 faac 	bl	8005094 <memmove>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	1b9b      	subs	r3, r3, r6
 8004b42:	60a3      	str	r3, [r4, #8]
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	4433      	add	r3, r6
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4e:	462a      	mov	r2, r5
 8004b50:	f000 fae6 	bl	8005120 <_realloc_r>
 8004b54:	4606      	mov	r6, r0
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d1e0      	bne.n	8004b1c <__ssputs_r+0x5c>
 8004b5a:	4650      	mov	r0, sl
 8004b5c:	6921      	ldr	r1, [r4, #16]
 8004b5e:	f7ff feb9 	bl	80048d4 <_free_r>
 8004b62:	230c      	movs	r3, #12
 8004b64:	f8ca 3000 	str.w	r3, [sl]
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	e7e9      	b.n	8004b4a <__ssputs_r+0x8a>
	...

08004b78 <_svfiprintf_r>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	4698      	mov	r8, r3
 8004b7e:	898b      	ldrh	r3, [r1, #12]
 8004b80:	4607      	mov	r7, r0
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	460d      	mov	r5, r1
 8004b86:	4614      	mov	r4, r2
 8004b88:	b09d      	sub	sp, #116	@ 0x74
 8004b8a:	d510      	bpl.n	8004bae <_svfiprintf_r+0x36>
 8004b8c:	690b      	ldr	r3, [r1, #16]
 8004b8e:	b973      	cbnz	r3, 8004bae <_svfiprintf_r+0x36>
 8004b90:	2140      	movs	r1, #64	@ 0x40
 8004b92:	f7ff ff09 	bl	80049a8 <_malloc_r>
 8004b96:	6028      	str	r0, [r5, #0]
 8004b98:	6128      	str	r0, [r5, #16]
 8004b9a:	b930      	cbnz	r0, 8004baa <_svfiprintf_r+0x32>
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b01d      	add	sp, #116	@ 0x74
 8004ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004baa:	2340      	movs	r3, #64	@ 0x40
 8004bac:	616b      	str	r3, [r5, #20]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bb8:	2330      	movs	r3, #48	@ 0x30
 8004bba:	f04f 0901 	mov.w	r9, #1
 8004bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d5c <_svfiprintf_r+0x1e4>
 8004bc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bca:	4623      	mov	r3, r4
 8004bcc:	469a      	mov	sl, r3
 8004bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd2:	b10a      	cbz	r2, 8004bd8 <_svfiprintf_r+0x60>
 8004bd4:	2a25      	cmp	r2, #37	@ 0x25
 8004bd6:	d1f9      	bne.n	8004bcc <_svfiprintf_r+0x54>
 8004bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bdc:	d00b      	beq.n	8004bf6 <_svfiprintf_r+0x7e>
 8004bde:	465b      	mov	r3, fp
 8004be0:	4622      	mov	r2, r4
 8004be2:	4629      	mov	r1, r5
 8004be4:	4638      	mov	r0, r7
 8004be6:	f7ff ff6b 	bl	8004ac0 <__ssputs_r>
 8004bea:	3001      	adds	r0, #1
 8004bec:	f000 80a7 	beq.w	8004d3e <_svfiprintf_r+0x1c6>
 8004bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf2:	445a      	add	r2, fp
 8004bf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 809f 	beq.w	8004d3e <_svfiprintf_r+0x1c6>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c0a:	f10a 0a01 	add.w	sl, sl, #1
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	9307      	str	r3, [sp, #28]
 8004c12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c18:	4654      	mov	r4, sl
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c20:	484e      	ldr	r0, [pc, #312]	@ (8004d5c <_svfiprintf_r+0x1e4>)
 8004c22:	f000 fa61 	bl	80050e8 <memchr>
 8004c26:	9a04      	ldr	r2, [sp, #16]
 8004c28:	b9d8      	cbnz	r0, 8004c62 <_svfiprintf_r+0xea>
 8004c2a:	06d0      	lsls	r0, r2, #27
 8004c2c:	bf44      	itt	mi
 8004c2e:	2320      	movmi	r3, #32
 8004c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c34:	0711      	lsls	r1, r2, #28
 8004c36:	bf44      	itt	mi
 8004c38:	232b      	movmi	r3, #43	@ 0x2b
 8004c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c44:	d015      	beq.n	8004c72 <_svfiprintf_r+0xfa>
 8004c46:	4654      	mov	r4, sl
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f04f 0c0a 	mov.w	ip, #10
 8004c4e:	9a07      	ldr	r2, [sp, #28]
 8004c50:	4621      	mov	r1, r4
 8004c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c56:	3b30      	subs	r3, #48	@ 0x30
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	d94b      	bls.n	8004cf4 <_svfiprintf_r+0x17c>
 8004c5c:	b1b0      	cbz	r0, 8004c8c <_svfiprintf_r+0x114>
 8004c5e:	9207      	str	r2, [sp, #28]
 8004c60:	e014      	b.n	8004c8c <_svfiprintf_r+0x114>
 8004c62:	eba0 0308 	sub.w	r3, r0, r8
 8004c66:	fa09 f303 	lsl.w	r3, r9, r3
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	46a2      	mov	sl, r4
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	e7d2      	b.n	8004c18 <_svfiprintf_r+0xa0>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	1d19      	adds	r1, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9103      	str	r1, [sp, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfbb      	ittet	lt
 8004c7e:	425b      	neglt	r3, r3
 8004c80:	f042 0202 	orrlt.w	r2, r2, #2
 8004c84:	9307      	strge	r3, [sp, #28]
 8004c86:	9307      	strlt	r3, [sp, #28]
 8004c88:	bfb8      	it	lt
 8004c8a:	9204      	strlt	r2, [sp, #16]
 8004c8c:	7823      	ldrb	r3, [r4, #0]
 8004c8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c90:	d10a      	bne.n	8004ca8 <_svfiprintf_r+0x130>
 8004c92:	7863      	ldrb	r3, [r4, #1]
 8004c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c96:	d132      	bne.n	8004cfe <_svfiprintf_r+0x186>
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	3402      	adds	r4, #2
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	9203      	str	r2, [sp, #12]
 8004ca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d60 <_svfiprintf_r+0x1e8>
 8004cac:	2203      	movs	r2, #3
 8004cae:	4650      	mov	r0, sl
 8004cb0:	7821      	ldrb	r1, [r4, #0]
 8004cb2:	f000 fa19 	bl	80050e8 <memchr>
 8004cb6:	b138      	cbz	r0, 8004cc8 <_svfiprintf_r+0x150>
 8004cb8:	2240      	movs	r2, #64	@ 0x40
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	eba0 000a 	sub.w	r0, r0, sl
 8004cc0:	4082      	lsls	r2, r0
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	3401      	adds	r4, #1
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ccc:	2206      	movs	r2, #6
 8004cce:	4825      	ldr	r0, [pc, #148]	@ (8004d64 <_svfiprintf_r+0x1ec>)
 8004cd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd4:	f000 fa08 	bl	80050e8 <memchr>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d036      	beq.n	8004d4a <_svfiprintf_r+0x1d2>
 8004cdc:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <_svfiprintf_r+0x1f0>)
 8004cde:	bb1b      	cbnz	r3, 8004d28 <_svfiprintf_r+0x1b0>
 8004ce0:	9b03      	ldr	r3, [sp, #12]
 8004ce2:	3307      	adds	r3, #7
 8004ce4:	f023 0307 	bic.w	r3, r3, #7
 8004ce8:	3308      	adds	r3, #8
 8004cea:	9303      	str	r3, [sp, #12]
 8004cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cee:	4433      	add	r3, r6
 8004cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf2:	e76a      	b.n	8004bca <_svfiprintf_r+0x52>
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfc:	e7a8      	b.n	8004c50 <_svfiprintf_r+0xd8>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f04f 0c0a 	mov.w	ip, #10
 8004d04:	4619      	mov	r1, r3
 8004d06:	3401      	adds	r4, #1
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d10:	3a30      	subs	r2, #48	@ 0x30
 8004d12:	2a09      	cmp	r2, #9
 8004d14:	d903      	bls.n	8004d1e <_svfiprintf_r+0x1a6>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0c6      	beq.n	8004ca8 <_svfiprintf_r+0x130>
 8004d1a:	9105      	str	r1, [sp, #20]
 8004d1c:	e7c4      	b.n	8004ca8 <_svfiprintf_r+0x130>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	2301      	movs	r3, #1
 8004d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d26:	e7f0      	b.n	8004d0a <_svfiprintf_r+0x192>
 8004d28:	ab03      	add	r3, sp, #12
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <_svfiprintf_r+0x1f4>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	f3af 8000 	nop.w
 8004d38:	1c42      	adds	r2, r0, #1
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	d1d6      	bne.n	8004cec <_svfiprintf_r+0x174>
 8004d3e:	89ab      	ldrh	r3, [r5, #12]
 8004d40:	065b      	lsls	r3, r3, #25
 8004d42:	f53f af2d 	bmi.w	8004ba0 <_svfiprintf_r+0x28>
 8004d46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d48:	e72c      	b.n	8004ba4 <_svfiprintf_r+0x2c>
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	462a      	mov	r2, r5
 8004d50:	4638      	mov	r0, r7
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <_svfiprintf_r+0x1f4>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	f000 f87d 	bl	8004e54 <_printf_i>
 8004d5a:	e7ed      	b.n	8004d38 <_svfiprintf_r+0x1c0>
 8004d5c:	080051ea 	.word	0x080051ea
 8004d60:	080051f0 	.word	0x080051f0
 8004d64:	080051f4 	.word	0x080051f4
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	08004ac1 	.word	0x08004ac1

08004d70 <_printf_common>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	4616      	mov	r6, r2
 8004d76:	4698      	mov	r8, r3
 8004d78:	688a      	ldr	r2, [r1, #8]
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfb8      	it	lt
 8004d82:	4613      	movlt	r3, r2
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d90:	b10a      	cbz	r2, 8004d96 <_printf_common+0x26>
 8004d92:	3301      	adds	r3, #1
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	0699      	lsls	r1, r3, #26
 8004d9a:	bf42      	ittt	mi
 8004d9c:	6833      	ldrmi	r3, [r6, #0]
 8004d9e:	3302      	addmi	r3, #2
 8004da0:	6033      	strmi	r3, [r6, #0]
 8004da2:	6825      	ldr	r5, [r4, #0]
 8004da4:	f015 0506 	ands.w	r5, r5, #6
 8004da8:	d106      	bne.n	8004db8 <_printf_common+0x48>
 8004daa:	f104 0a19 	add.w	sl, r4, #25
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dc2b      	bgt.n	8004e10 <_printf_common+0xa0>
 8004db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	3b00      	subs	r3, #0
 8004dc0:	bf18      	it	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	0692      	lsls	r2, r2, #26
 8004dc6:	d430      	bmi.n	8004e2a <_printf_common+0xba>
 8004dc8:	4641      	mov	r1, r8
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dd0:	47c8      	blx	r9
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d023      	beq.n	8004e1e <_printf_common+0xae>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	6922      	ldr	r2, [r4, #16]
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	bf14      	ite	ne
 8004de2:	2500      	movne	r5, #0
 8004de4:	6833      	ldreq	r3, [r6, #0]
 8004de6:	f04f 0600 	mov.w	r6, #0
 8004dea:	bf08      	it	eq
 8004dec:	68e5      	ldreq	r5, [r4, #12]
 8004dee:	f104 041a 	add.w	r4, r4, #26
 8004df2:	bf08      	it	eq
 8004df4:	1aed      	subeq	r5, r5, r3
 8004df6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dfa:	bf08      	it	eq
 8004dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bfc4      	itt	gt
 8004e04:	1a9b      	subgt	r3, r3, r2
 8004e06:	18ed      	addgt	r5, r5, r3
 8004e08:	42b5      	cmp	r5, r6
 8004e0a:	d11a      	bne.n	8004e42 <_printf_common+0xd2>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e008      	b.n	8004e22 <_printf_common+0xb2>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4652      	mov	r2, sl
 8004e14:	4641      	mov	r1, r8
 8004e16:	4638      	mov	r0, r7
 8004e18:	47c8      	blx	r9
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d103      	bne.n	8004e26 <_printf_common+0xb6>
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e26:	3501      	adds	r5, #1
 8004e28:	e7c1      	b.n	8004dae <_printf_common+0x3e>
 8004e2a:	2030      	movs	r0, #48	@ 0x30
 8004e2c:	18e1      	adds	r1, r4, r3
 8004e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e38:	4422      	add	r2, r4
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e40:	e7c2      	b.n	8004dc8 <_printf_common+0x58>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4622      	mov	r2, r4
 8004e46:	4641      	mov	r1, r8
 8004e48:	4638      	mov	r0, r7
 8004e4a:	47c8      	blx	r9
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d0e6      	beq.n	8004e1e <_printf_common+0xae>
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7d9      	b.n	8004e08 <_printf_common+0x98>

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	7e0f      	ldrb	r7, [r1, #24]
 8004e5a:	4691      	mov	r9, r2
 8004e5c:	2f78      	cmp	r7, #120	@ 0x78
 8004e5e:	4680      	mov	r8, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	469a      	mov	sl, r3
 8004e64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	@ 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d3 	beq.w	800501c <_printf_i+0x1c8>
 8004e76:	2f58      	cmp	r7, #88	@ 0x58
 8004e78:	f000 80ba 	beq.w	8004ff0 <_printf_i+0x19c>
 8004e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e94 <_printf_i+0x40>)
 8004e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	08005003 	.word	0x08005003
 8004ec4:	08004f2b 	.word	0x08004f2b
 8004ec8:	08004fbd 	.word	0x08004fbd
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005025 	.word	0x08005025
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f2b 	.word	0x08004f2b
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004fc5 	.word	0x08004fc5
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6032      	str	r2, [r6, #0]
 8004ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e09e      	b.n	800503e <_printf_i+0x1ea>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	1d19      	adds	r1, r3, #4
 8004f06:	6031      	str	r1, [r6, #0]
 8004f08:	0606      	lsls	r6, r0, #24
 8004f0a:	d501      	bpl.n	8004f10 <_printf_i+0xbc>
 8004f0c:	681d      	ldr	r5, [r3, #0]
 8004f0e:	e003      	b.n	8004f18 <_printf_i+0xc4>
 8004f10:	0645      	lsls	r5, r0, #25
 8004f12:	d5fb      	bpl.n	8004f0c <_printf_i+0xb8>
 8004f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	da03      	bge.n	8004f24 <_printf_i+0xd0>
 8004f1c:	232d      	movs	r3, #45	@ 0x2d
 8004f1e:	426d      	negs	r5, r5
 8004f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f24:	230a      	movs	r3, #10
 8004f26:	4859      	ldr	r0, [pc, #356]	@ (800508c <_printf_i+0x238>)
 8004f28:	e011      	b.n	8004f4e <_printf_i+0xfa>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	6833      	ldr	r3, [r6, #0]
 8004f2e:	0608      	lsls	r0, r1, #24
 8004f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f34:	d402      	bmi.n	8004f3c <_printf_i+0xe8>
 8004f36:	0649      	lsls	r1, r1, #25
 8004f38:	bf48      	it	mi
 8004f3a:	b2ad      	uxthmi	r5, r5
 8004f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	bf14      	ite	ne
 8004f42:	230a      	movne	r3, #10
 8004f44:	2308      	moveq	r3, #8
 8004f46:	4851      	ldr	r0, [pc, #324]	@ (800508c <_printf_i+0x238>)
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f4e:	6866      	ldr	r6, [r4, #4]
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	bfa8      	it	ge
 8004f54:	6821      	ldrge	r1, [r4, #0]
 8004f56:	60a6      	str	r6, [r4, #8]
 8004f58:	bfa4      	itt	ge
 8004f5a:	f021 0104 	bicge.w	r1, r1, #4
 8004f5e:	6021      	strge	r1, [r4, #0]
 8004f60:	b90d      	cbnz	r5, 8004f66 <_printf_i+0x112>
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d04b      	beq.n	8004ffe <_printf_i+0x1aa>
 8004f66:	4616      	mov	r6, r2
 8004f68:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f6c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f70:	5dc7      	ldrb	r7, [r0, r7]
 8004f72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f76:	462f      	mov	r7, r5
 8004f78:	42bb      	cmp	r3, r7
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	d9f4      	bls.n	8004f68 <_printf_i+0x114>
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d10b      	bne.n	8004f9a <_printf_i+0x146>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	07df      	lsls	r7, r3, #31
 8004f86:	d508      	bpl.n	8004f9a <_printf_i+0x146>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	6861      	ldr	r1, [r4, #4]
 8004f8c:	4299      	cmp	r1, r3
 8004f8e:	bfde      	ittt	le
 8004f90:	2330      	movle	r3, #48	@ 0x30
 8004f92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f9a:	1b92      	subs	r2, r2, r6
 8004f9c:	6122      	str	r2, [r4, #16]
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f8cd a000 	str.w	sl, [sp]
 8004fa8:	aa03      	add	r2, sp, #12
 8004faa:	f7ff fee1 	bl	8004d70 <_printf_common>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d14a      	bne.n	8005048 <_printf_i+0x1f4>
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	b004      	add	sp, #16
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f043 0320 	orr.w	r3, r3, #32
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	2778      	movs	r7, #120	@ 0x78
 8004fc6:	4832      	ldr	r0, [pc, #200]	@ (8005090 <_printf_i+0x23c>)
 8004fc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	6831      	ldr	r1, [r6, #0]
 8004fd0:	061f      	lsls	r7, r3, #24
 8004fd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fd6:	d402      	bmi.n	8004fde <_printf_i+0x18a>
 8004fd8:	065f      	lsls	r7, r3, #25
 8004fda:	bf48      	it	mi
 8004fdc:	b2ad      	uxthmi	r5, r5
 8004fde:	6031      	str	r1, [r6, #0]
 8004fe0:	07d9      	lsls	r1, r3, #31
 8004fe2:	bf44      	itt	mi
 8004fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fe8:	6023      	strmi	r3, [r4, #0]
 8004fea:	b11d      	cbz	r5, 8004ff4 <_printf_i+0x1a0>
 8004fec:	2310      	movs	r3, #16
 8004fee:	e7ab      	b.n	8004f48 <_printf_i+0xf4>
 8004ff0:	4826      	ldr	r0, [pc, #152]	@ (800508c <_printf_i+0x238>)
 8004ff2:	e7e9      	b.n	8004fc8 <_printf_i+0x174>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	e7f6      	b.n	8004fec <_printf_i+0x198>
 8004ffe:	4616      	mov	r6, r2
 8005000:	e7bd      	b.n	8004f7e <_printf_i+0x12a>
 8005002:	6833      	ldr	r3, [r6, #0]
 8005004:	6825      	ldr	r5, [r4, #0]
 8005006:	1d18      	adds	r0, r3, #4
 8005008:	6961      	ldr	r1, [r4, #20]
 800500a:	6030      	str	r0, [r6, #0]
 800500c:	062e      	lsls	r6, r5, #24
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	d501      	bpl.n	8005016 <_printf_i+0x1c2>
 8005012:	6019      	str	r1, [r3, #0]
 8005014:	e002      	b.n	800501c <_printf_i+0x1c8>
 8005016:	0668      	lsls	r0, r5, #25
 8005018:	d5fb      	bpl.n	8005012 <_printf_i+0x1be>
 800501a:	8019      	strh	r1, [r3, #0]
 800501c:	2300      	movs	r3, #0
 800501e:	4616      	mov	r6, r2
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	e7bc      	b.n	8004f9e <_printf_i+0x14a>
 8005024:	6833      	ldr	r3, [r6, #0]
 8005026:	2100      	movs	r1, #0
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	6032      	str	r2, [r6, #0]
 800502c:	681e      	ldr	r6, [r3, #0]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f859 	bl	80050e8 <memchr>
 8005036:	b108      	cbz	r0, 800503c <_printf_i+0x1e8>
 8005038:	1b80      	subs	r0, r0, r6
 800503a:	6060      	str	r0, [r4, #4]
 800503c:	6863      	ldr	r3, [r4, #4]
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	2300      	movs	r3, #0
 8005042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005046:	e7aa      	b.n	8004f9e <_printf_i+0x14a>
 8005048:	4632      	mov	r2, r6
 800504a:	4649      	mov	r1, r9
 800504c:	4640      	mov	r0, r8
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	47d0      	blx	sl
 8005052:	3001      	adds	r0, #1
 8005054:	d0ad      	beq.n	8004fb2 <_printf_i+0x15e>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	079b      	lsls	r3, r3, #30
 800505a:	d413      	bmi.n	8005084 <_printf_i+0x230>
 800505c:	68e0      	ldr	r0, [r4, #12]
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	4298      	cmp	r0, r3
 8005062:	bfb8      	it	lt
 8005064:	4618      	movlt	r0, r3
 8005066:	e7a6      	b.n	8004fb6 <_printf_i+0x162>
 8005068:	2301      	movs	r3, #1
 800506a:	4632      	mov	r2, r6
 800506c:	4649      	mov	r1, r9
 800506e:	4640      	mov	r0, r8
 8005070:	47d0      	blx	sl
 8005072:	3001      	adds	r0, #1
 8005074:	d09d      	beq.n	8004fb2 <_printf_i+0x15e>
 8005076:	3501      	adds	r5, #1
 8005078:	68e3      	ldr	r3, [r4, #12]
 800507a:	9903      	ldr	r1, [sp, #12]
 800507c:	1a5b      	subs	r3, r3, r1
 800507e:	42ab      	cmp	r3, r5
 8005080:	dcf2      	bgt.n	8005068 <_printf_i+0x214>
 8005082:	e7eb      	b.n	800505c <_printf_i+0x208>
 8005084:	2500      	movs	r5, #0
 8005086:	f104 0619 	add.w	r6, r4, #25
 800508a:	e7f5      	b.n	8005078 <_printf_i+0x224>
 800508c:	080051fb 	.word	0x080051fb
 8005090:	0800520c 	.word	0x0800520c

08005094 <memmove>:
 8005094:	4288      	cmp	r0, r1
 8005096:	b510      	push	{r4, lr}
 8005098:	eb01 0402 	add.w	r4, r1, r2
 800509c:	d902      	bls.n	80050a4 <memmove+0x10>
 800509e:	4284      	cmp	r4, r0
 80050a0:	4623      	mov	r3, r4
 80050a2:	d807      	bhi.n	80050b4 <memmove+0x20>
 80050a4:	1e43      	subs	r3, r0, #1
 80050a6:	42a1      	cmp	r1, r4
 80050a8:	d008      	beq.n	80050bc <memmove+0x28>
 80050aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050b2:	e7f8      	b.n	80050a6 <memmove+0x12>
 80050b4:	4601      	mov	r1, r0
 80050b6:	4402      	add	r2, r0
 80050b8:	428a      	cmp	r2, r1
 80050ba:	d100      	bne.n	80050be <memmove+0x2a>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050c6:	e7f7      	b.n	80050b8 <memmove+0x24>

080050c8 <_sbrk_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	2300      	movs	r3, #0
 80050cc:	4d05      	ldr	r5, [pc, #20]	@ (80050e4 <_sbrk_r+0x1c>)
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fc f810 	bl	80010f8 <_sbrk>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_sbrk_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_sbrk_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	200002f4 	.word	0x200002f4

080050e8 <memchr>:
 80050e8:	4603      	mov	r3, r0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	b2c9      	uxtb	r1, r1
 80050ee:	4402      	add	r2, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	d101      	bne.n	80050fa <memchr+0x12>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e003      	b.n	8005102 <memchr+0x1a>
 80050fa:	7804      	ldrb	r4, [r0, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	428c      	cmp	r4, r1
 8005100:	d1f6      	bne.n	80050f0 <memchr+0x8>
 8005102:	bd10      	pop	{r4, pc}

08005104 <memcpy>:
 8005104:	440a      	add	r2, r1
 8005106:	4291      	cmp	r1, r2
 8005108:	f100 33ff 	add.w	r3, r0, #4294967295
 800510c:	d100      	bne.n	8005110 <memcpy+0xc>
 800510e:	4770      	bx	lr
 8005110:	b510      	push	{r4, lr}
 8005112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005116:	4291      	cmp	r1, r2
 8005118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800511c:	d1f9      	bne.n	8005112 <memcpy+0xe>
 800511e:	bd10      	pop	{r4, pc}

08005120 <_realloc_r>:
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	4680      	mov	r8, r0
 8005126:	4615      	mov	r5, r2
 8005128:	460c      	mov	r4, r1
 800512a:	b921      	cbnz	r1, 8005136 <_realloc_r+0x16>
 800512c:	4611      	mov	r1, r2
 800512e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005132:	f7ff bc39 	b.w	80049a8 <_malloc_r>
 8005136:	b92a      	cbnz	r2, 8005144 <_realloc_r+0x24>
 8005138:	f7ff fbcc 	bl	80048d4 <_free_r>
 800513c:	2400      	movs	r4, #0
 800513e:	4620      	mov	r0, r4
 8005140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005144:	f000 f81a 	bl	800517c <_malloc_usable_size_r>
 8005148:	4285      	cmp	r5, r0
 800514a:	4606      	mov	r6, r0
 800514c:	d802      	bhi.n	8005154 <_realloc_r+0x34>
 800514e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005152:	d8f4      	bhi.n	800513e <_realloc_r+0x1e>
 8005154:	4629      	mov	r1, r5
 8005156:	4640      	mov	r0, r8
 8005158:	f7ff fc26 	bl	80049a8 <_malloc_r>
 800515c:	4607      	mov	r7, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	d0ec      	beq.n	800513c <_realloc_r+0x1c>
 8005162:	42b5      	cmp	r5, r6
 8005164:	462a      	mov	r2, r5
 8005166:	4621      	mov	r1, r4
 8005168:	bf28      	it	cs
 800516a:	4632      	movcs	r2, r6
 800516c:	f7ff ffca 	bl	8005104 <memcpy>
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7ff fbae 	bl	80048d4 <_free_r>
 8005178:	463c      	mov	r4, r7
 800517a:	e7e0      	b.n	800513e <_realloc_r+0x1e>

0800517c <_malloc_usable_size_r>:
 800517c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005180:	1f18      	subs	r0, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	bfbc      	itt	lt
 8005186:	580b      	ldrlt	r3, [r1, r0]
 8005188:	18c0      	addlt	r0, r0, r3
 800518a:	4770      	bx	lr

0800518c <_init>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr

08005198 <_fini>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr
