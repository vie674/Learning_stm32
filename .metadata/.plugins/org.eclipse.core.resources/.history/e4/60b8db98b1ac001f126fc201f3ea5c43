/*
 * imu.c
 *
 *  Created on: Nov 22, 2024
 *      Author: hung
 */
#include "imu.h"

void IMU9250_WriteRegiter(uint8_t reg,uint8_t data,SPI_HandleTypeDef *hspi)
{
	uint8_t temp = reg&(~0x80);
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 0);
	HAL_SPI_Transmit(hspi, &temp, 1, 200);
	HAL_SPI_Transmit(hspi,&data,1,200);
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 1);
}
uint8_t IMU9250_ReadRegiter(uint8_t reg,SPI_HandleTypeDef *hspi)
{
	uint8_t temp = reg|0x80;
	uint8_t data=0;
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 0);
	HAL_SPI_Transmit(hspi, &temp, 1, 200);
	HAL_SPI_Receive(hspi, &data, 1, 200);
	HAL_GPIO_WritePin(IMU9250_SPI_CS_PORT, IMU9250_SPI_CS_PIN, 1);
	return data;
}
int16_t IMU9250_ReadGyro(char name,SPI_HandleTypeDef *hspi)
{
	int16_t data=0;
	uint8_t dataL=0,dataH=0;
	if (name =='X')
	{
		dataH=IMU9250_ReadRegiter(GYRO_XOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(GYRO_XOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else if(name=='Y')
	{
		dataH=IMU9250_ReadRegiter(GYRO_YOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(GYRO_YOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else if (name =='Z')
	{
		dataH=IMU9250_ReadRegiter(GYRO_ZOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(GYRO_ZOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else
	{
		return IM_NOT_OK ;
	}
	return data;
}
int16_t IMU9250_ReadAccer(char name,SPI_HandleTypeDef *hspi)
{
	int16_t data=0;
	uint8_t dataL=0,dataH=0;
	if (name =='X')
	{
		dataH=IMU9250_ReadRegiter(ACCEL_XOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(ACCEL_XOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else if(name=='Y')
	{
		dataH=IMU9250_ReadRegiter(ACCEL_YOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(ACCEL_YOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else if (name =='Z')
	{
		dataH=IMU9250_ReadRegiter(ACCEL_ZOUT_H, hspi);
		dataL=IMU9250_ReadRegiter(ACCEL_ZOUT_L, hspi);
		data= (int16_t)(dataH<<8)|dataL;
	}
	else
	{
		return IM_NOT_OK;
	}
	return data;
}
//uint8_t AK8963_ReadMacASA(char* name,SPI_HandleTypeDef *hspi)
//{
//	uint8_t data=144;
//	//Write I2C address of AK8963 to I2C_SLV_ADD
//	IMU9250_WriteRegiter(I2C_SLV0_ADDR, AK8963_ADR|0x80, hspi);
//
//	//Write the address of the control register in AK8962 to write to
//	IMU9250_WriteRegiter(I2C_SLV0_REG, CNTL1, hspi);
//
//	//Put the data to write to AK8963 to turn on FUSE ROM ACCESS MODE
//	IMU9250_WriteRegiter(I2C_SLV0_DO, 0x0F, hspi);
//
//	//Choose number of byte to read in ASA register
//	IMU9250_WriteRegiter(I2C_SLV0_CTRL, 0x83, hspi);
//	//Read data from EXT_SENS_DATA register
//	if (*name == 'X')
//	{
//		data = IMU9250_ReadRegiter(EXT_SENS_DATA_00, hspi);
//	}
//	else if (*name =='Y')
//	{
//		data =IMU9250_ReadRegiter(EXT_SENS_DATA_01, hspi);
//	}
//	else if (*name =='Z')
//	{
//		data =IMU9250_ReadRegiter(EXT_SENS_DATA_02, hspi);
//	}
//	return data;
//}
void AK8963_WriteRegister (uint8_t reg,uint8_t data,SPI_HandleTypeDef *hspi)
{
	//Write I2C address of AK8963 to I2C_SLV_ADD
	IMU9250_WriteRegiter(I2C_SLV0_ADDR, AK8963_ADR, hspi);

	//Put the register address where begin to write
	IMU9250_WriteRegiter(I2C_SLV0_REG, reg, hspi);

	//Put the data to write to AK8963 module
	IMU9250_WriteRegiter(I2C_SLV0_DO, data, hspi);

	//Enable reading data from A8963 and store in the first e EXT_SENS_DATA register
	//Choose number of byte to read
	IMU9250_WriteRegiter(I2C_SLV0_CTRL, I2C_ENABLE|0, hspi);
}
uint8_t* AK8963_ReadRegister (uint8_t reg,uint8_t numberOfByte,SPI_HandleTypeDef *hspi)
{
	uint8_t data[numberOfByte],i;
	//Write I2C address of AK8963 to I2C_SLV_ADD
	IMU9250_WriteRegiter(I2C_SLV0_ADDR, AK8963_ADR, hspi);

	//Put the register address where begin to write
	IMU9250_WriteRegiter(I2C_SLV0_REG, reg, hspi);

	//Enable reading data from A8963 and store in the first e EXT_SENS_DATA register
	//Choose number of byte to read
	IMU9250_WriteRegiter(I2C_SLV0_CTRL, I2C_ENABLE|numberOfByte, hspi);

	HAL_Delay(100);
	//Read Data
	for (i=0;i<numberOfByte;i++)
	{
	data[i] = IMU9250_ReadRegiter(EXT_SENS_DATA_00+i, hspi);
	}
	return data;
}
void IMU9250_InitI2CMaster(SPI_HandleTypeDef *hspi)
{
	//Turn on I2C Master
	IMU9250_WriteRegiter(USER_CTRL, 0x20, hspi);

	//Choose clock for I2C in I2C control
	IMU9250_WriteRegiter(I2C_MST_CTRL, 0x0D, hspi);
}
void AK8963_TurnOnFuseMode (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister( AK8963_CNTL1, 0x0F,hspi);
}
void AK8963_Powerdown (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister( AK8963_CNTL1, 0x00,hspi);
}
void AK8963_ConsMeasure1 (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister(AK8963_CNTL1, 0x02,hspi);
}
void AK8963_ConsMeasure2 (SPI_HandleTypeDef *hspi)
{
	AK8963_WriteRegister(AK8963_CNTL1, 0x06,hspi);
}
void AK8963_Init (SPI_HandleTypeDef *hspi)
{
	AK8963_Powerdown(hspi);
	HAL_Delay(100);
}
uint8_t* AK8963_Read_ASA (SPI_HandleTypeDef *hspi)
{
	AK8963_TurnOnFuseMode(hspi);
	uint8_t* ASA_Data = AK8963_ReadRegister(AK8963_ASAX, 3, hspi);
	return ASA_Data;
}
int16_t AK8963_Read_MagSensor (SPI_HandleTypeDef *hspi)
{

}
